// Generated by SFHaxe 0.3.2
package sf.type;
extern class ParticleEmitterData {
	/**
		CLIENT
		 Creates a new Particle with the given material and position.
	**/
	#if CLIENT @:native("add") public function add(material:sf.type.Material, position:sf.type.Vector, startSize:Float, endSize:Float, startLength:Float, endLength:Float, startAlpha:Float, endAlpha:Float, dieTime:Float):sf.type.Particle;#end
	/**
		CLIENT
		 Returns whether this object is valid or not.
	**/
	#if CLIENT @:native("isValid") public function isValid():Bool;#end
	/**
		CLIENT
		 This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).
	**/
	#if CLIENT @:native("setNearClip") public function setNearClip(distanceMin:Float, distanceMax:Float):Void;#end
	/**
		CLIENT
		 Removes the emitter, making it no longer usable from Lua. If particles remain, the emitter will be removed when all particles die.
	**/
	#if CLIENT @:native("destroy") public function destroy():Void;#end
	/**
		CLIENT
		 Sets the position of the particle emitter.
	**/
	#if CLIENT @:native("setPos") public function setPos(position:sf.type.Vector):Void;#end
	/**
		CLIENT
		 Sets the bounding box for this emitter. Usually the bounding box is automatically determined by the particles, but this function overrides it.
	**/
	#if CLIENT @:native("setBBox") public function setBBox(mins:sf.type.Vector, maxs:sf.type.Vector):Void;#end
	/**
		CLIENT
		 Returns whether this emitter is 3D or not. This is set when creating the emitter with ParticleEmitter.
	**/
	#if CLIENT @:native("is3D") public function is3D():Bool;#end
	/**
		CLIENT
		 The function name has not much in common with its actual function.
		 It applies a radius to every particles that affects the building of the bounding box, as it usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z.
		 This function just adds/subtracts the radius and inflates the bounding box.
	**/
	#if CLIENT @:native("setParticleCullRadius") public function setParticleCullRadius(radius:Float):Void;#end
	/**
		CLIENT
		 Manually renders all particles the emitter has created.
	**/
	#if CLIENT @:native("draw") public function draw():Void;#end
	/**
		CLIENT
		 Returns the position of this emitter. This is set when creating the emitter with ParticleEmitter.
	**/
	#if CLIENT @:native("getPos") public function getPos():sf.type.Vector;#end
	/**
		CLIENT
		 Returns number of particles left able to be created from the emitter
	**/
	#if CLIENT @:native("getParticlesLeft") public function getParticlesLeft():Float;#end
	/**
		CLIENT
		 Returns the amount of active particles of this emitter.
	**/
	#if CLIENT @:native("getNumActiveParticles") public function getNumActiveParticles():Float;#end
	/**
		CLIENT
		 Prevents all particles of the emitter from automatically drawing. They can be manually drawn with draw()
	**/
	#if CLIENT @:native("setNoDraw") public function setNoDraw(noDraw:Bool):Void;#end
}

@:forward
extern abstract ParticleEmitter(ParticleEmitterData) {
}

