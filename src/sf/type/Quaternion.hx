// Generated by SFHaxe 0.3.0
package sf.type;
extern class QuaternionData {
	/**
		SHARED
		 Returns the euler angle of rotation in degrees
	**/
	@:native("getEulerAngle") public function getEulerAngle():sf.type.Angle;
	/**
		SHARED
		 Returns conjugate of the quaternion
	**/
	@:native("getConjugate") public function getConjugate():sf.type.Quaternion;
	/**
		SHARED
		 Contains quaternion's represented rotation within an angle between 0 and 180 degrees.
		 Self-Modifies. Does not return anything
	**/
	@:native("mod") public function mod():Void;
	/**
		SHARED
		 Copies components of the second quaternion to the first quaternion.
		 Self-Modifies. Does not return anything
	**/
	@:native("set") public function set(quat:sf.type.Quaternion):Void;
	/**
		SHARED
		 Calculates natural logarithm of the quaternion.
		 Self-Modifies. Does not return anything
	**/
	@:native("log") public function log():Void;
	/**
		SHARED
		 Calculates right direction of the quaternion
	**/
	@:native("getRight") public function getRight():sf.type.Vector;
	/**
		SHARED
		 Sets I component of the quaternion and returns self after modification
	**/
	@:native("setI") public function setI(i:Float):sf.type.Quaternion;
	/**
		SHARED
		 Raises Euler's constant e to the quaternion's power
	**/
	@:native("getExp") public function getExp():sf.type.Quaternion;
	/**
		SHARED
		 Sets J component of the quaternion and returns self after modification
	**/
	@:native("setJ") public function setJ(j:Float):sf.type.Quaternion;
	/**
		SHARED
		 Returns dot product of two quaternions
	**/
	@:native("dot") public function dot(quat:sf.type.Quaternion):Float;
	/**
		SHARED
		 Sets K component of the quaternion and returns self after modification
	**/
	@:native("setK") public function setK(k:Float):sf.type.Quaternion;
	/**
		SHARED
		 Tostring metamethod
	**/
	@:native("__tostring") public function __tostring(q:sf.type.Quaternion):std.String;
	/**
		SHARED
		 Gets the quaternion representing rotation contained within an angle between 0 and 180 degrees
	**/
	@:native("getMod") public function getMod():sf.type.Quaternion;
	/**
		SHARED
		 Returns absolute value of the quaternion
	**/
	@:native("getAbsolute") public function getAbsolute():sf.type.Vector;
	/**
		SHARED
		 Normalizes the quaternion.
		 Self-Modifies. Does not return anything
	**/
	@:native("normalize") public function normalize():Void;
	/**
		SHARED
		 Returns new normalized quaternion
	**/
	@:native("getNormalized") public function getNormalized():sf.type.Quaternion;
	/**
		SHARED
		 Calculates natural logarithm of the quaternion
	**/
	@:native("getLog") public function getLog():sf.type.Quaternion;
	/**
		SHARED
		 Calculates forward direction of the quaternion
	**/
	@:native("getForward") public function getForward():sf.type.Vector;
	/**
		SHARED
		 Calculates inverse of the quaternon.
		 Self-Modifies. Does not return anything
	**/
	@:native("inverse") public function inverse():Void;
	/**
		SHARED
		 Sets R (real) component of the quaternion and returns self after modification
	**/
	@:native("setR") public function setR(r:Float):sf.type.Quaternion;
	/**
		SHARED
		 Calculates upward direction of the quaternion
	**/
	@:native("getUp") public function getUp():sf.type.Vector;
	/**
		SHARED
		 Returns components of the quaternion
	**/
	@:native("unpack") public function unpack():Float;
	/**
		SHARED
		 Returns the axis of rotation
	**/
	@:native("getRotationAxis") public function getRotationAxis():sf.type.Vector;
	/**
		SHARED
		 Converts quaternion to a matrix
	**/
	@:native("getMatrix") public function getMatrix(?Optional:Null<Bool>):sf.type.VMatrix;
	/**
		SHARED
		 Returns the rotation vector - rotation axis where magnitude is the angle of rotation in degrees
	**/
	@:native("getRotationVector") public function getRotationVector():sf.type.Vector;
	/**
		SHARED
		 Conjugates the quaternion.
		 Self-Modifies. Does not return anything
	**/
	@:native("conjugate") public function conjugate():Void;
	/**
		SHARED
		 Involution metamethod
	**/
	@:native("__pow") public function __pow(lhs:Dynamic, rhs:Dynamic):sf.type.Quaternion;
	/**
		SHARED
		 Set components of the quaternion
		 Self-Modifies. Does not return anything
	**/
	@:native("pack") public function pack(r:Float, i:Float, j:Float, k:Float):Void;
	/**
		SHARED
		 Converts quaternion to a vector by dropping the R (real) component
	**/
	@:native("getVector") public function getVector():sf.type.Vector;
	/**
		SHARED
		 Calculates inverse of the quaternion
	**/
	@:native("getInverse") public function getInverse():sf.type.Quaternion;
	/**
		SHARED
		 Raises Euler's constant e to the quaternion's power.
		 Self-Modifies. Does not return anything
	**/
	@:native("exp") public function exp():Void;
	/**
		SHARED
		 Creates a copy of the quaternion
	**/
	@:native("clone") public function clone():sf.type.Quaternion;
	/**
		SHARED
		 Returns the angle of rotation in degrees
	**/
	@:native("getRotationAngle") public function getRotationAngle(?full:Null<Bool>):Float;
}

@:forward
extern abstract Quaternion(QuaternionData) {
	/**
		SHARED
		 Subtraction metamethod
	**/
	@:op(A-B) public function __sub(A:Any):Any;
	/**
		SHARED
		 Addition metamethod
	**/
	@:op(A+B) public function __add(A:Any):Any;
	/**
		SHARED
		 Multiplication metamethod
	**/
	@:op(A*B) public function __mul(A:Any):Any;
	/**
		SHARED
		 Equivalence metamethod
	**/
	@:op(A==B) public function __eq(A:Any):Any;
	/**
		SHARED
		 Division metamethod
	**/
	@:op(A/B) public function __div(A:Any):Any;
	/**
		SHARED
		 Newindex metamethod
	**/
	@:op([]) public function __newindex(A:Any, B:Any):Any;
	/**
		SHARED
		 Index metamethod
		 Can be indexed with: 1, 2, 3, 4, r, i, j, k, rr, ri, rj, rk, rrr, rijk, kjir, etc. Numerical lookup is the most efficient
	**/
	@:op([]) public function __index(A:Any):Any;
	/**
		SHARED
		 Unary minus metamethod
	**/
	@:op(-A) public function __unm():Any;
}

