// Generated by SFHaxe 0.3.0
package sf.type;
extern class VMatrixData {
	/**
		SHARED
		 Sets the right direction of the matrix. Negated second column
		 Self-Modifies. Does not return anything
	**/
	@:native("setRight") public function setRight(right:sf.type.Vector):Void;
	/**
		SHARED
		 Inverts the matrix. Inverting the matrix will fail if its determinant is 0 or close to 0
		 Self-Modifies.
	**/
	@:native("invert") public function invert():Bool;
	/**
		SHARED
		 Returns an inverted matrix. Inverting the matrix will fail if its determinant is 0 or close to 0
	**/
	@:native("getInverse") public function getInverse():sf.type.VMatrix;
	/**
		SHARED
		 Sets the forward direction of the matrix. First column
		 Self-Modifies. Does not return anything
	**/
	@:native("setForward") public function setForward(forward:sf.type.Vector):Void;
	/**
		SHARED
		 Returns angles
	**/
	@:native("getAngles") public function getAngles():sf.type.Angle;
	/**
		SHARED
		 Returns scale
	**/
	@:native("getScale") public function getScale():sf.type.Vector;
	/**
		SHARED
		 Returns forward vector of matrix. First matrix column
	**/
	@:native("getForward") public function getForward():sf.type.Vector;
	/**
		SHARED
		 Sets the rotation or the matrix to the rotation by an axis and angle
		 Self-Modifies. Does not return anything
	**/
	@:native("setAxisAngle") public function setAxisAngle(axis:sf.type.Vector, angle:Float):Void;
	/**
		SHARED
		 Returns a specific field in the matrix
	**/
	@:native("getField") public function getField(row:Float, column:Float):Float;
	/**
		SHARED
		 Copies the values from the second matrix to the first matrix.
		 Self-Modifies. Does not return anything
	**/
	@:native("set") public function set(src:sf.type.VMatrix):Void;
	/**
		SHARED
		 Translate the matrix
	**/
	@:native("translate") public function translate(vec:sf.type.Vector):Void;
	/**
		SHARED
		 Returns right vector of matrix. Negated second matrix column
	**/
	@:native("getRight") public function getRight():sf.type.Vector;
	/**
		SHARED
		 Sets the translation
		 Self-Modifies. Does not return anything
	**/
	@:native("setTranslation") public function setTranslation(vec:sf.type.Vector):Void;
	/**
		SHARED
		 Inverts the matrix efficiently for translations and rotations
		 Self-Modifies. Does not return anything
	**/
	@:native("invertTR") public function invertTR():Void;
	/**
		SHARED
		 Returns whether the matrix is a rotation matrix or not. Checks if the forward, right and up vectors are orthogonal and normalized.
	**/
	@:native("isRotationMatrix") public function isRotationMatrix():Bool;
	/**
		SHARED
		 Rotate the matrix
		 Self-Modifies. Does not return anything
	**/
	@:native("rotate") public function rotate(ang:sf.type.Angle):Void;
	/**
		SHARED
		 Scale the matrix
		 Self-Modifies. Does not return anything
	**/
	@:native("scale") public function scale(vec:sf.type.Vector):Void;
	/**
		SHARED
		 Sets the scale
		 Self-Modifies. Does not return anything
	**/
	@:native("setScale") public function setScale(vec:sf.type.Vector):Void;
	/**
		SHARED
		 Returns an inverted matrix. Efficiently for translations and rotations
	**/
	@:native("getInverseTR") public function getInverseTR():sf.type.VMatrix;
	/**
		SHARED
		 Returns whether the matrix is equal to Identity matrix or not
	**/
	@:native("isIdentity") public function isIdentity():Bool;
	/**
		SHARED
		 Sets the angles
		 Self-Modifies. Does not return anything
	**/
	@:native("setAngles") public function setAngles(ang:sf.type.Angle):Void;
	/**
		SHARED
		 Copies The matrix and returns a new matrix
	**/
	@:native("clone") public function clone():sf.type.VMatrix;
	/**
		SHARED
		 Initializes the matrix as Identity matrix
		 Self-Modifies. Does not return anything
	**/
	@:native("setIdentity") public function setIdentity():Void;
	/**
		SHARED
		 Converts the matrix to a 4x4 table
	**/
	@:native("toTable") public function toTable():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		 Returns translation
	**/
	@:native("getTranslation") public function getTranslation():sf.type.Vector;
	/**
		SHARED
		 Returns up vector of matrix. Third matrix column
	**/
	@:native("getUp") public function getUp():sf.type.Vector;
	/**
		SHARED
		 Gets the rotation axis and angle of rotation of the rotation matrix
	**/
	@:native("getAxisAngle") public function getAxisAngle():sf.type.Vector;
	/**
		SHARED
		 tostring metamethod
	**/
	@:native("__tostring") public function __tostring():std.String;
	/**
		SHARED
		 Allows you to set all 16 fields in row-major order
		 Self-Modifies. Does not return anything
	**/
	@:native("setUnpacked") public function setUnpacked(fields:...Float):Void;
	/**
		SHARED
		 Returns all 16 fields of the matrix in row-major order
	**/
	@:native("unpack") public function unpack():...Float;
	/**
		SHARED
		 Sets the up direction of the matrix. Third column
		 Self-Modifies. Does not return anything
	**/
	@:native("setUp") public function setUp(up:sf.type.Vector):Void;
	/**
		SHARED
		 Sets a specific field in the matrix
		 Self-Modifies. Does not return anything
	**/
	@:native("setField") public function setField(row:Float, column:Float, value:Float):Void;
	/**
		SHARED
		 Scales the absolute translation
		 Self-Modifies. Does not return anything
	**/
	@:native("scaleTranslation") public function scaleTranslation(num:Float):Void;
}

@:forward
extern abstract VMatrix(VMatrixData) {
	/**
		SHARED
		 Multiplies two matrices (Left must be a VMatrix)
	**/
	@:op(A*B) public function __mul(A:Any):Any;
	/**
		SHARED
		 Subtracts two matrices (why would you do this?)
	**/
	@:op(A-B) public function __sub(A:Any):Any;
	/**
		SHARED
		 Adds two matrices (why would you do this?)
	**/
	@:op(A+B) public function __add(A:Any):Any;
}

