// Generated by SFHaxe 0.3.3
package sf.type;
extern class NextBotData extends sf.type.Entity.EntityData {
	/**
		SERVER
		Returns whether the nextbot this locomotion is attached to is on ground or not.
	**/
	#if SERVER @:native("isOnGround") public function isOnGround():Bool;#end
	/**
		SERVER
		Adds a callback function that will be run when this nextbot dies.
	**/
	#if SERVER @:native("addDeathCallback") public function addDeathCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Gets the nextbot's velocity as a vector.
	**/
	#if SERVER @:native("getVelocity") public function getVelocity():sf.type.Vector;#end
	/**
		SERVER
		Sets the move speed of the NextBot.
	**/
	#if SERVER @:native("setMoveSpeed") public function setMoveSpeed(newmovespeed:Float):Void;#end
	/**
		SERVER
		Gets the max height the bot can step up.
	**/
	#if SERVER @:native("getStepHeight") public function getStepHeight():Float;#end
	/**
		SERVER
		Sets the height of the bot's jump
	**/
	#if SERVER @:native("setJumpHeight") public function setJumpHeight(jumpheight:Float):Void;#end
	/**
		SERVER
		Sets whether the Nextbot is allowed to climb or not. This is used during path generation. Works similarly to nb_allow_climbing convar. By default bots are allowed to climb.
	**/
	#if SERVER @:native("setClimbAllowed") public function setClimbAllowed(climballowed:Bool):Void;#end
	/**
		SERVER
		Gets the acceleration speed of the NextBot.
	**/
	#if SERVER @:native("getAcceleration") public function getAcceleration():Float;#end
	/**
		SERVER
		Sets the nextbot's velocity. Seems to work only when used if nextbot is in air after using nextbot:jump()
	**/
	#if SERVER @:native("setVelocity") public function setVelocity(newvel:sf.type.Vector):Void;#end
	/**
		SERVER
		Returns the Vector the nextbot is trying to go to, set by setGotoPos
	**/
	#if SERVER @:native("getGotoPos") public function getGotoPos():Null<sf.type.Vector>;#end
	/**
		SERVER
		Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.
	**/
	#if SERVER @:native("setMaxYawRate") public function setMaxYawRate(newmaxyawrate:Float):Void;#end
	/**
		SERVER
		Sets the activity the nextbot uses for idling.
	**/
	#if SERVER @:native("setIdleAct") public function setIdleAct(runact:Float):Void;#end
	/**
		SERVER
		Sets whether the Nextbot is allowed try to to avoid obstacles or not. This is used during path generation. Works similarly to nb_allow_avoiding convar. By default bots are allowed to try to avoid obstacles.
	**/
	#if SERVER @:native("setAvoidAllowed") public function setAvoidAllowed(avoidallowed:Bool):Void;#end
	/**
		SERVER
		Makes the nextbot play a sequence. This takes priority over movement. Will go to set pos after animation plays.
	**/
	#if SERVER @:native("playSequence") public function playSequence(seqtoplay:std.String):Void;#end
	/**
		SERVER
		Adds a callback function that will be run when the nextbot enters a new nav area.
	**/
	#if SERVER @:native("addNavChangeCallback") public function addNavChangeCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Removes a ignite callback function from the NextBot.
	**/
	#if SERVER @:native("removeIgniteCallback") public function removeIgniteCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Sets whether the Nextbot is allowed to jump gaps or not. This is used during path generation. Works similarly to nb_allow_gap_jumping convar. By default bots are allowed to jump gaps.
	**/
	#if SERVER @:native("setJumpGapsAllowed") public function setJumpGapsAllowed(jumpgapsallowed:Bool):Void;#end
	/**
		SERVER
		Removes a death callback function from the NextBot.
	**/
	#if SERVER @:native("removeDeathCallback") public function removeDeathCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Adds a callback function that will be run when this nextbot lands on the ground.
	**/
	#if SERVER @:native("addLandCallback") public function addLandCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Removes a nav area change callback function from the NextBot.
	**/
	#if SERVER @:native("removeNavChangeCallback") public function removeNavChangeCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Removes the contact callback function from the NextBot if present.
	**/
	#if SERVER @:native("removeContactCallback") public function removeContactCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Removes a landing callback function from the NextBot.
	**/
	#if SERVER @:native("removeLandCallback") public function removeLandCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Gets the move speed of the NextBot.
	**/
	#if SERVER @:native("getMoveSpeed") public function getMoveSpeed():Float;#end
	/**
		SERVER
		Returns whether the Nextbot is allowed to climb or not.
	**/
	#if SERVER @:native("getClimbAllowed") public function getClimbAllowed():Bool;#end
	/**
		SERVER
		Return unit vector in XY plane describing our direction of motion - even if we are currently not moving
	**/
	#if SERVER @:native("getGroundMotionVector") public function getGroundMotionVector():sf.type.Vector;#end
	/**
		SERVER
		Adds a callback function that will be run when this nextbot gets ignited.
	**/
	#if SERVER @:native("addIgniteCallback") public function addIgniteCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Removes a injury callback function from the NextBot.
	**/
	#if SERVER @:native("removeInjuredCallback") public function removeInjuredCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Returns whether the Nextbot is allowed to avoid obstacles or not.
	**/
	#if SERVER @:native("getAvoidAllowed") public function getAvoidAllowed():Bool;#end
	/**
		SERVER
		Gets the activity the nextbot uses for idling.
	**/
	#if SERVER @:native("getIdleAct") public function getIdleAct():Float;#end
	/**
		SERVER
		Makes the bot jump across a gap. The bot must be on ground (Entity:isOnGround). Its model must have the ACT_JUMP activity for proper animation.
	**/
	#if SERVER @:native("jumpAcrossGap") public function jumpAcrossGap(landGoal:sf.type.Vector, landForward:sf.type.Vector):Void;#end
	/**
		SERVER
		Sets the activity the nextbot uses for running.
	**/
	#if SERVER @:native("setRunAct") public function setRunAct(runact:Float):Void;#end
	/**
		SERVER
		Sets the gravity of the NextBot.
	**/
	#if SERVER @:native("setGravity") public function setGravity(newgravity:Float):Void;#end
	/**
		SERVER
		Sets a callback function that will be run when this nextbot touches another entity. Only 1 per NB. Setting a new callback will replace the old one.
	**/
	#if SERVER @:native("addContactCallback") public function addContactCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Sets the deceleration speed of the NextBot.
	**/
	#if SERVER @:native("setDeceleration") public function setDeceleration(newaccel:Float):Void;#end
	/**
		SERVER
		Returns whether the Nextbot is allowed to jump gaps or not.
	**/
	#if SERVER @:native("getJumpGapsAllowed") public function getJumpGapsAllowed():Bool;#end
	/**
		SERVER
		Forces the nextbot to jump. Requires the model to have an ACT_JUMP for proper animation.
	**/
	#if SERVER @:native("jump") public function jump():Void;#end
	/**
		SERVER
		Sets the max height the bot can step up.
	**/
	#if SERVER @:native("setStepHeight") public function setStepHeight(stepheight:Float):Void;#end
	/**
		SERVER
		Adds a callback function that will be run when this nextbot is injured.
	**/
	#if SERVER @:native("addInjuredCallback") public function addInjuredCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Removes a landing callback function from the NextBot.
	**/
	#if SERVER @:native("removeLeaveGroundCallback") public function removeLeaveGroundCallback(callbackid:std.String):Void;#end
	/**
		SERVER
		Makes the nextbot try to go to a specified position.
	**/
	#if SERVER @:native("setGotoPos") public function setGotoPos(gotopos:sf.type.Vector):Void;#end
	/**
		SERVER
		Removes the "go to" position from the NextBot.
	**/
	#if SERVER @:native("removeGotoPos") public function removeGotoPos():Void;#end
	/**
		SERVER
		Sets the acceleration speed of the NextBot.
	**/
	#if SERVER @:native("setAcceleration") public function setAcceleration(newaccel:Float):Void;#end
	/**
		SERVER
		Makes the nextbot face towards a specified position. Has to be called continuously to be effective.
	**/
	#if SERVER @:native("faceTowards") public function faceTowards(facepos:sf.type.Vector):Void;#end
	/**
		SERVER
		Gets the height of the bot's jump
	**/
	#if SERVER @:native("getJumpHeight") public function getJumpHeight():Float;#end
	/**
		SERVER
		Sets the height the nextbot is scared to fall from.
	**/
	#if SERVER @:native("setDeathDropHeight") public function setDeathDropHeight(newdeathdropheight:Float):Void;#end
	/**
		SERVER
		Adds a callback function that will be run when this nextbot leaves the ground.
	**/
	#if SERVER @:native("addLeaveGroundCallback") public function addLeaveGroundCallback(callbackid:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		SERVER
		Returns whether this nextbot can reach and/or traverse/move in given NavArea.
	**/
	#if SERVER @:native("isAreaTraversable") public function isAreaTraversable(NavArea:sf.type.NavArea):Bool;#end
	/**
		SERVER
		Gets the height the nextbot is scared to fall from.
	**/
	#if SERVER @:native("getDeathDropHeight") public function getDeathDropHeight():Float;#end
	/**
		SERVER
		Gets the deceleration speed of the NextBot.
	**/
	#if SERVER @:native("getDeceleration") public function getDeceleration():Float;#end
	/**
		SERVER
		Gets the gravity of the NextBot.
	**/
	#if SERVER @:native("getGravity") public function getGravity():Float;#end
	/**
		SERVER
		Enable or disable ragdolling on death for the NextBot.
	**/
	#if SERVER @:native("ragdollOnDeath") public function ragdollOnDeath(ragdollondeath:Bool):Void;#end
	/**
		SERVER
		Gets the activity the nextbot uses for running.
	**/
	#if SERVER @:native("getRunAct") public function getRunAct():Float;#end
	/**
		SERVER
		Gets the max rate at which the NextBot can visually rotate.
	**/
	#if SERVER @:native("getMaxYawRate") public function getMaxYawRate(The:Float):Void;#end
}

@:forward
extern abstract NextBot(NextBotData) {
}

