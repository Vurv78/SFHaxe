// Generated by SFHaxe 0.3.3
package sf.type;
extern class WebSocketData {
	/**
		CLIENT
		Returns "WebSocket: " alongside the address of the websocket.
	**/
	#if CLIENT @:native("__tostring") public function __tostring():Void;#end
	/**
		CLIENT
		Returns the current state of the websocket.
		https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState
		* 0 - CONNECTING
		* 1 - OPEN
		* 2 - CLOSING
		* 3 - CLOSED
	**/
	#if CLIENT @:native("getState") public function getState():Float;#end
	/**
		CLIENT
		Sends a message to the connected websocket stream.
	**/
	#if CLIENT @:native("write") public function write(msg:std.String):Void;#end
	/**
		CLIENT
		Connects to the websocket server.
	**/
	#if CLIENT @:native("connect") public function connect():Void;#end
	/**
		CLIENT
		Closes the websocket connection. Does nothing if already closed
	**/
	#if CLIENT @:native("close") public function close():Void;#end
}

@:forward
extern abstract WebSocket(WebSocketData) {
	/**
		CLIENT
		Sets a callback for the websocket.
		Can be used with the following callbacks:
		* onMessage - Called when a message is received.
		* onConnected - Called when the websocket initially connects.
		* onDisconnected - Called when the websocket is disconnected, with the only param being if it was caused by an 'error' event.
	**/
	@:op([]) public function __newindex(A:Any, B:Any):Any;
}

