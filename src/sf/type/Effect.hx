// Generated by SFHaxe 0.2.0
package sf.type;
extern class EffectData {
	/**
		SHARED
		 Sets the effect's attachment
	**/
	@:native("setAttachment") public function setAttachment(attachment:Any):Void;
	/**
		SHARED
		 Sets the effect's radius
	**/
	@:native("setRadius") public function setRadius(radius:Any):Void;
	/**
		SHARED
		 Returns the effect's attachment
	**/
	@:native("getAttachment") public function getAttachment():Any;
	/**
		SHARED
		 Returns the effect's radius
	**/
	@:native("getRadius") public function getRadius():Any;
	/**
		SHARED
		 Returns the effect's scale
	**/
	@:native("getScale") public function getScale():Any;
	/**
		SHARED
		 Returns the effect's surface prop
	**/
	@:native("getSurfaceProp") public function getSurfaceProp():Any;
	/**
		SHARED
		 Returns the effect's flags
	**/
	@:native("getFlags") public function getFlags():Any;
	/**
		SHARED
		 Sets the effect's color
	**/
	@:native("setColor") public function setColor(color:Any):Void;
	/**
		SHARED
		 Sets the effect's origin
	**/
	@:native("setOrigin") public function setOrigin(origin:Any):Void;
	/**
		SHARED
		 Sets the effect's material index
	**/
	@:native("setMaterialIndex") public function setMaterialIndex(mat:Any):Void;
	/**
		SHARED
		 Sets the effect's surface property
	**/
	@:native("setSurfaceProp") public function setSurfaceProp(prop:Any):Void;
	/**
		SHARED
		 Returns the effect's start position
	**/
	@:native("getStart") public function getStart():Any;
	/**
		SHARED
		 Sets the effect's hitbox
	**/
	@:native("setHitBox") public function setHitBox(hitbox:Any):Void;
	/**
		SHARED
		 Sets the effect's normal
	**/
	@:native("setNormal") public function setNormal(normal:Any):Void;
	/**
		SHARED
		 Returns the effect's color
	**/
	@:native("getColor") public function getColor():Any;
	/**
		SHARED
		 Returns the effect's origin
	**/
	@:native("getOrigin") public function getOrigin():Any;
	/**
		SHARED
		 Sets the effect's entity index
	**/
	@:native("setEntIndex") public function setEntIndex(index:Any):Void;
	/**
		SHARED
		 Sets the effect's start
	**/
	@:native("setStart") public function setStart(start:Any):Void;
	/**
		SHARED
		 Plays the effect
	**/
	@:native("play") public function play(eff:Any):Void;
	/**
		SHARED
		 Sets the effect's magnitude
	**/
	@:native("setMagnitude") public function setMagnitude(magnitude:Any):Void;
	/**
		SHARED
		 Sets the effect's angles
	**/
	@:native("setAngles") public function setAngles(ang:Any):Void;
	/**
		SHARED
		 Returns the effect's entity
	**/
	@:native("getEntity") public function getEntity():Any;
	/**
		SHARED
		 Returns the effect's material index
	**/
	@:native("getMaterialIndex") public function getMaterialIndex():Any;
	/**
		SHARED
		 Returns the effect's hitbox
	**/
	@:native("getHitBox") public function getHitBox():Any;
	/**
		SHARED
		 Sets the effect's damage type
	**/
	@:native("setDamageType") public function setDamageType(dmgtype:Any):Void;
	/**
		SHARED
		 Returns the effect's normal
	**/
	@:native("getNormal") public function getNormal():Any;
	/**
		SHARED
		 Returns the effect's damagetype
	**/
	@:native("getDamageType") public function getDamageType():Any;
	/**
		SHARED
		 Sets the effect's scale
	**/
	@:native("setScale") public function setScale(scale:Any):Void;
	/**
		SHARED
		 Sets the effect's flags
	**/
	@:native("setFlags") public function setFlags(flags:Any):Void;
	/**
		SHARED
		 Returns the effect's magnitude
	**/
	@:native("getMagnitude") public function getMagnitude():Any;
	/**
		SHARED
		 Returns the effect's entindex
	**/
	@:native("getEntIndex") public function getEntIndex():Any;
	/**
		SHARED
		 Returns the effect's angle
	**/
	@:native("getAngles") public function getAngles():Any;
	/**
		SHARED
		 Sets the effect's entity
	**/
	@:native("setEntity") public function setEntity(ent:Any):Void;
}

@:forward
extern abstract Effect(EffectData) {
}

