// Generated by SFHaxe 0.2.0
package sf.type;
extern class FileData {
	/**
		CLIENT
		 Writes a string to the file and advances the file position
	**/
	#if CLIENT @:native("write") public function write(str:Any):Void;#end
	/**
		CLIENT
		 Reads a certain length of the file's bytes
	**/
	#if CLIENT @:native("read") public function read(n:Any):Any;#end
	/**
		CLIENT
		 Writes a float and advances the file position
	**/
	#if CLIENT @:native("writeFloat") public function writeFloat(x:Any):Void;#end
	/**
		CLIENT
		 Writes a byte and advances the file position
	**/
	#if CLIENT @:native("writeByte") public function writeByte(x:Any):Void;#end
	/**
		CLIENT
		 Writes a long and advances the file position
	**/
	#if CLIENT @:native("writeLong") public function writeLong(x:Any):Void;#end
	/**
		CLIENT
		 Wait until all changes to the file are complete
	**/
	#if CLIENT @:native("flush") public function flush():Void;#end
	/**
		CLIENT
		 Writes a double and advances the file position
	**/
	#if CLIENT @:native("writeDouble") public function writeDouble(x:Any):Void;#end
	/**
		CLIENT
		 Reads a line and advances the file position
	**/
	#if CLIENT @:native("readLine") public function readLine():Any;#end
	/**
		CLIENT
		 Reads a boolean and advances the file position
	**/
	#if CLIENT @:native("readBool") public function readBool():Any;#end
	/**
		CLIENT
		 Writes a boolean and advances the file position
	**/
	#if CLIENT @:native("writeBool") public function writeBool(x:Any):Void;#end
	/**
		CLIENT
		 Reads a byte and advances the file position
	**/
	#if CLIENT @:native("readByte") public function readByte():Any;#end
	/**
		CLIENT
		 Reads a long and advances the file position
	**/
	#if CLIENT @:native("readLong") public function readLong():Any;#end
	/**
		CLIENT
		 Sets the file position
	**/
	#if CLIENT @:native("seek") public function seek(n:Any):Void;#end
	/**
		CLIENT
		 Flushes and closes the file. The file must be opened again to use a new file object.
	**/
	#if CLIENT @:native("close") public function close():Void;#end
	/**
		CLIENT
		 Reads a double and advances the file position
	**/
	#if CLIENT @:native("readDouble") public function readDouble():Any;#end
	/**
		CLIENT
		 Reads a float and advances the file position
	**/
	#if CLIENT @:native("readFloat") public function readFloat():Any;#end
	/**
		CLIENT
		 Moves the file position relative to its current position
	**/
	#if CLIENT @:native("skip") public function skip(n:Any):Any;#end
	/**
		CLIENT
		 Writes a short and advances the file position
	**/
	#if CLIENT @:native("writeShort") public function writeShort(x:Any):Void;#end
	/**
		CLIENT
		 Returns the current file position
	**/
	#if CLIENT @:native("tell") public function tell():Any;#end
	/**
		CLIENT
		 Reads a short and advances the file position
	**/
	#if CLIENT @:native("readShort") public function readShort():Any;#end
	/**
		CLIENT
		 Returns the file's size in bytes
	**/
	#if CLIENT @:native("size") public function size():Any;#end
}

@:forward
extern abstract File(FileData) {
}

