// Generated by SFHaxe 0.3.1
package sf.type;
extern class VehicleData extends sf.type.Entity.EntityData {
	/**
		SERVER
		 Strips weapons of the driver
	**/
	#if SERVER @:native("stripDriver") public function stripDriver(?_class:Null<std.String>):Void;#end
	/**
		SERVER
		 Will unlock the vehicle.
	**/
	#if SERVER @:native("unlock") public function unlock():Void;#end
	/**
		SHARED
		 Turns a vehicle into a string.
	**/
	@:native("__tostring") public function __tostring():std.String;
	/**
		SERVER
		 Returns a passenger of a vehicle
	**/
	#if SERVER @:native("getPassenger") public function getPassenger(n:Float):sf.type.Player;#end
	/**
		SERVER
		 Ejects the driver of the vehicle
	**/
	#if SERVER @:native("ejectDriver") public function ejectDriver():Void;#end
	/**
		SERVER
		 Kills the driver of the vehicle
	**/
	#if SERVER @:native("killDriver") public function killDriver():Void;#end
	/**
		SERVER
		 Returns the driver of the vehicle
	**/
	#if SERVER @:native("getDriver") public function getDriver():sf.type.Player;#end
	/**
		SERVER
		 Will lock the vehicle preventing players from entering or exiting the vehicle.
	**/
	#if SERVER @:native("lock") public function lock():Void;#end
}

@:forward
extern abstract Vehicle(VehicleData) {
}

