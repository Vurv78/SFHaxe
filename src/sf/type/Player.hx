// Generated by SFHaxe 0.3.3
package sf.type;
extern class PlayerData extends sf.type.Entity.EntityData {
	/**
		SHARED
		Get the value of a DarkRPVar, which is shared between server and client. Case-sensitive.
		Possible variables include (but are not limited to): AFK, AFKDemoted, money, salaryRL, rpname, job, HasGunlicense, Arrested, wanted, wantedReason, agenda, zombieToggle, hitTarget, hitPrice, lastHitTime, Energy
		For money specifically, you may optionally use Player:getMoney instead.
		Some variables may be blacklisted so that you can't read their value.
	**/
	@:native("getDarkRPVar") public function getDarkRPVar(_var:std.String):Any;
	/**
		SERVER
		Forces the player to say the first argument
		Only works on the chip's owner.
	**/
	#if SERVER @:native("say") public function say(text:std.String, ?teamOnly:Null<Bool>):Void;#end
	/**
		SHARED
		Returns whether the player's flashlight is on
	**/
	@:native("isFlashlightOn") public function isFlashlightOn():Bool;
	/**
		SHARED
		Returns whether the player is connected
	**/
	@:native("isConnected") public function isConnected():Bool;
	/**
		SHARED
		Returns whether the player is alive
	**/
	@:native("isAlive") public function isAlive():Bool;
	/**
		SHARED
		Returns whether the player is frozen
	**/
	@:native("isFrozen") public function isFrozen():Bool;
	/**
		SHARED
		Whether the player has a certain DarkRP privilege.
	**/
	@:native("hasDarkRPPrivilege") public function hasDarkRPPrivilege():Bool;
	/**
		SHARED
		Get whether the player can lock a given door. DarkRP only.
	**/
	@:native("canKeysLock") public function canKeysLock(door:sf.type.Entity):Null<Bool>;
	/**
		SHARED
		Get whether the player can afford the given amount of money. DarkRP only.
	**/
	@:native("canAfford") public function canAfford(amount:Float):Bool;
	/**
		CLIENT
		Returns whether the local player has muted the player
	**/
	#if CLIENT @:native("isMuted") public function isMuted():Bool;#end
	/**
		SHARED
		Returns the player's view model
		In the Client realm, other players' viewmodels are not available unless they are being spectated
	**/
	@:native("getViewModel") public function getViewModel():sf.type.Entity;
	/**
		SHARED
		Returns the name of the player's current team
	**/
	@:native("getTeamName") public function getTeamName():std.String;
	/**
		SHARED
		Returns the player's field of view
	**/
	@:native("getFOV") public function getFOV():Float;
	/**
		SHARED
		Returns the player's UserID
	**/
	@:native("getUserID") public function getUserID():Float;
	/**
		SHARED
		Whether this player is a hitman. DarkRP only.
	**/
	@:native("isHitman") public function isHitman():Null<Bool>;
	/**
		SERVER
		Returns true if the player is timing out
	**/
	#if SERVER @:native("isTimingOut") public function isTimingOut():Bool;#end
	/**
		SERVER
		Returns the time left on a player's team ban. DarkRP only.
		Only works if the player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if SERVER @:native("teamBanTimeLeft") public function teamBanTimeLeft(?team:Null<Float>):Null<Float>;#end
	/**
		SERVER
		Sets the view entity of the player. Only works if they are linked to a hud.
	**/
	#if SERVER @:native("setViewEntity") public function setViewEntity(ent:sf.type.Entity):Void;#end
	/**
		SHARED
		Returns the player's SteamID
	**/
	@:native("getSteamID") public function getSteamID():std.String;
	/**
		SHARED
		Returns the player's name
	**/
	@:native("getName") public function getName():std.String;
	/**
		CLIENT
		Sets the animation range
	**/
	#if CLIENT @:native("setAnimationRange") public function setAnimationRange(min:Float, max:Float):Void;#end
	/**
		SHARED
		Returns the player's duck speed
	**/
	@:native("getDuckSpeed") public function getDuckSpeed():Float;
	/**
		SERVER
		Returns whether or not the player has godmode
	**/
	#if SERVER @:native("hasGodMode") public function hasGodMode():Bool;#end
	/**
		CLIENT
		Sets the animation playback rate
	**/
	#if CLIENT @:native("setAnimationRate") public function setAnimationRate(rate:Float):Void;#end
	/**
		SHARED
		Get the reason why someone is wanted. DarkRP only.
	**/
	@:native("getWantedReason") public function getWantedReason():Null<std.String>;
	/**
		SHARED
		Whether this player is a Chief. DarkRP only.
	**/
	@:native("isChief") public function isChief():Null<Bool>;
	/**
		SHARED
		Returns the player's maximum speed
	**/
	@:native("getMaxSpeed") public function getMaxSpeed():Float;
	/**
		SHARED
		Returns the camera punch offset angle
	**/
	@:native("getViewPunchAngles") public function getViewPunchAngles():sf.type.Angle;
	/**
		SERVER
		Returns the number of seconds that the player has been timing out for
	**/
	#if SERVER @:native("getTimeoutSeconds") public function getTimeoutSeconds():Float;#end
	/**
		CLIENT
		Sets the weight of the gesture animation in the given gesture slot
	**/
	#if CLIENT @:native("setGestureWeight") public function setGestureWeight(?slot:Null<Float>, ?weight:Null<Float>):Void;#end
	/**
		SHARED
		Whether this player is a medic. DarkRP only.
	**/
	@:native("isMedic") public function isMedic():Null<Bool>;
	/**
		CLIENT
		Sets the animation time
	**/
	#if CLIENT @:native("setAnimationTime") public function setAnimationTime(time:Float):Void;#end
	/**
		SERVER
		Unown every door and vehicle owned by this player. DarkRP only.
	**/
	#if SERVER @:native("keysUnOwnAll") public function keysUnOwnAll():Void;#end
	/**
		CLIENT
		Resets gesture animations on a player
	**/
	#if CLIENT @:native("resetGesture") public function resetGesture(?slot:Null<Float>):Void;#end
	/**
		SHARED
		Returns the vehicle the player is driving
	**/
	@:native("getVehicle") public function getVehicle():sf.type.Vehicle;
	/**
		SHARED
		Get the amount of money this player has. DarkRP only.
		Equivalent to "ply:getDarkRPVar('money')"
	**/
	@:native("getMoney") public function getMoney():Null<Float>;
	/**
		SERVER
		Returns the time in seconds since the player connected
	**/
	#if SERVER @:native("getTimeConnected") public function getTimeConnected():Float;#end
	/**
		SHARED
		Returns the player's current team
	**/
	@:native("getTeam") public function getTeam():Float;
	/**
		CLIENT
		Sets the animation activity
	**/
	#if CLIENT @:native("setAnimationActivity") public function setAnimationActivity(?activity:Dynamic):Void;#end
	/**
		SHARED
		Whether this player is the Mayor. DarkRP only.
	**/
	@:native("isMayor") public function isMayor():Null<Bool>;
	/**
		SHARED
		Returns the entity that the player is standing on
	**/
	@:native("getGroundEntity") public function getGroundEntity():sf.type.Entity;
	/**
		SHARED
		Returns whether the player belongs to a usergroup
	**/
	@:native("isUserGroup") public function isUserGroup(groupName:std.String):Bool;
	/**
		SHARED
		Whether this player is a cook. DarkRP only. Only works if hungermod is enabled.
	**/
	@:native("isCook") public function isCook():Null<Bool>;
	/**
		SHARED
		Returns the specified weapon or nil if the player doesn't have it
	**/
	@:native("getWeapon") public function getWeapon(wep:std.String):sf.type.Weapon;
	/**
		CLIENT
		Sets the animation bounce
	**/
	#if CLIENT @:native("setAnimationBounce") public function setAnimationBounce(bounce:Bool):Void;#end
	/**
		CLIENT
		Sets the animation progress
	**/
	#if CLIENT @:native("setAnimationProgress") public function setAnimationProgress(progress:Float):Void;#end
	/**
		SHARED
		Returns the player's current view entity
	**/
	@:native("getViewEntity") public function getViewEntity():sf.type.Entity;
	/**
		SHARED
		Returns whether or not the player is pushing the key.
	**/
	@:native("keyDown") public function keyDown(key:Float):Bool;
	/**
		CLIENT
		Gets the animation time
	**/
	#if CLIENT @:native("getAnimationTime") public function getAnimationTime():Float;#end
	/**
		SHARED
		Whether this player is wanted. DarkRP only. Use Player:getWantedReason if you want to know the reason.
	**/
	@:native("isWanted") public function isWanted():Null<Bool>;
	/**
		SHARED
		Returns the player's jump power
	**/
	@:native("getJumpPower") public function getJumpPower():Float;
	/**
		SHARED
		Get whether the player can unlock a given door. DarkRP only.
	**/
	@:native("canKeysUnlock") public function canKeysUnlock(door:sf.type.Entity):Null<Bool>;
	/**
		SERVER
		Sets a player's eye angles
	**/
	#if SERVER @:native("setEyeAngles") public function setEyeAngles(ang:sf.type.Angle):Void;#end
	/**
		CLIENT
		Returns whether the player is heard by the local player.
	**/
	#if CLIENT @:native("isSpeaking") public function isSpeaking():Bool;#end
	/**
		SHARED
		Gets the amount of ammo the player has.
	**/
	@:native("getAmmoCount") public function getAmmoCount(idOrName:Dynamic):Float;
	/**
		SHARED
		Returns the amount of kills of the player
	**/
	@:native("getFrags") public function getFrags():Float;
	/**
		CLIENT
		Sets the animation auto advance
	**/
	#if CLIENT @:native("setAnimationAutoAdvance") public function setAnimationAutoAdvance(auto_advance:Bool):Void;#end
	/**
		CLIENT
		Resets the animation
	**/
	#if CLIENT @:native("resetAnimation") public function resetAnimation():Void;#end
	/**
		SHARED
		Returns the player's current ping
	**/
	@:native("getPing") public function getPing():Float;
	/**
		SHARED
		Returns whether the player is a bot
	**/
	@:native("isBot") public function isBot():Bool;
	/**
		CLIENT
		Sets the animation loop
	**/
	#if CLIENT @:native("setAnimationLoop") public function setAnimationLoop(loop:Bool):Void;#end
	/**
		SHARED
		Returns whether the player is typing in their chat
	**/
	@:native("isTyping") public function isTyping():Bool;
	/**
		CLIENT
		Gets the progress of the animation ranging 0-1
	**/
	#if CLIENT @:native("getAnimationProgress") public function getAnimationProgress():Float;#end
	/**
		CLIENT
		Gets whether a animation is playing
	**/
	#if CLIENT @:native("isPlayingAnimation") public function isPlayingAnimation():Bool;#end
	/**
		SHARED
		Returns whether the player is in a vehicle
	**/
	@:native("inVehicle") public function inVehicle():Bool;
	/**
		SHARED
		Returns the player's running speed
	**/
	@:native("getRunSpeed") public function getRunSpeed():Float;
	/**
		SHARED
		Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.
	**/
	@:native("getEntityInUse") public function getEntityInUse():sf.type.Entity;
	/**
		SHARED
		Returns whether the player is sprinting
	**/
	@:native("isSprinting") public function isSprinting():Bool;
	/**
		SHARED
		Returns the name of the player's active weapon
	**/
	@:native("getActiveWeapon") public function getActiveWeapon():sf.type.Weapon;
	/**
		SHARED
		Returns the player's aim vector
	**/
	@:native("getAimVector") public function getAimVector():sf.type.Vector;
	/**
		SHARED
		Whether this player is arrested. DarkRP only.
	**/
	@:native("isArrested") public function isArrested():Null<Bool>;
	/**
		SHARED
		Returns whether the player is crouching
	**/
	@:native("isCrouching") public function isCrouching():Bool;
	/**
		SERVER
		Give this player money.
		This is subject to a burst limit. Use the darkrp.canGiveMoney function to check if you can request money that tick.
	**/
	#if SERVER @:native("giveMoney") public function giveMoney(amount:Float):Void;#end
	/**
		CLIENT
		Plays gesture animations on a player
	**/
	#if CLIENT @:native("playGesture") public function playGesture(animation:Dynamic, ?loop:Null<Bool>, ?slot:Null<Float>, ?weight:Null<Float>):Void;#end
	/**
		SERVER
		Request money from a player.
		This is subject to a burst limit. Use the darkrp.canMakeMoneyRequest function to check if you can request money that tick.
	**/
	#if SERVER @:native("requestMoney") public function requestMoney(?message:Null<std.String>, amount:Float, ?callbackSuccess:Null<haxe.Constraints.Function>, ?callbackFailure:Null<haxe.Constraints.Function>, ?receiver:Null<sf.type.Player>):Void;#end
	/**
		SHARED
		Returns a table with information of what the player is looking at
	**/
	@:native("getEyeTrace") public function getEyeTrace():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Returns a table of weapons the player is carrying
	**/
	@:native("getWeapons") public function getWeapons():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Returns the players armor
	**/
	@:native("getArmor") public function getArmor():Float;
	/**
		SHARED
		Get a player's pocket items. DarkRP only.
	**/
	@:native("getPocketItems") public function getPocketItems():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Returns the amount of deaths of the player
	**/
	@:native("getDeaths") public function getDeaths():Float;
	/**
		CLIENT
		Returns the voice volume of the player
	**/
	#if CLIENT @:native("voiceVolume") public function voiceVolume():Float;#end
	/**
		SHARED
		Whether this player is part of the police force (Mayor, CP, Chief). DarkRP only.
	**/
	@:native("isCP") public function isCP():Bool;
	/**
		SHARED
		Returns whether the player is an admin
	**/
	@:native("isAdmin") public function isAdmin():Bool;
	/**
		CLIENT
		Plays an animation on the player
	**/
	#if CLIENT @:native("setAnimation") public function setAnimation(sequence:Dynamic, ?progress:Null<Float>, ?rate:Null<Float>, ?loop:Null<Bool>, ?auto_advance:Null<Bool>, ?act:Dynamic):Void;#end
	/**
		SERVER
		Drops the players' weapon
	**/
	#if SERVER @:native("dropWeapon") public function dropWeapon(weapon:Dynamic, ?target:Null<sf.type.Vector>, ?velocity:Null<sf.type.Vector>):Void;#end
	/**
		SERVER
		Lets you change the size of yourself if the server has sf_permissions_entity_owneraccess 1
	**/
	#if SERVER @:native("setModelScale") public function setModelScale(scale:Float):Void;#end
	/**
		SHARED
		Get the job table of a player. DarkRP only.
	**/
	@:native("getJobTable") public function getJobTable():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Returns the player's shoot position
	**/
	@:native("getShootPos") public function getShootPos():sf.type.Vector;
	/**
		CLIENT
		Returns the relationship of the player to the local client
	**/
	#if CLIENT @:native("getFriendStatus") public function getFriendStatus():std.String;#end
	/**
		SHARED
		Returns true if the player is noclipped
	**/
	@:native("isNoclipped") public function isNoclipped():Bool;
	/**
		SHARED
		Returns maximum armor capacity
	**/
	@:native("getMaxArmor") public function getMaxArmor():Float;
	/**
		SERVER
		Returns the packet loss of the client
	**/
	#if SERVER @:native("getPacketLoss") public function getPacketLoss():Float;#end
	/**
		CLIENT
		Whether this player is in the same room as the LocalPlayer. DarkRP only.
	**/
	#if CLIENT @:native("isInRoom") public function isInRoom():Bool;#end
	/**
		SHARED
		Returns whether the player is a super admin
	**/
	@:native("isSuperAdmin") public function isSuperAdmin():Bool;
	/**
		SHARED
		Returns the player's SteamID64 / Community ID
		In singleplayer, this will return no value serverside.
		For bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join, and adds 1 to the id for the bot id.
		Returns no value for bots clientside.
	**/
	@:native("getSteamID64") public function getSteamID64():std.String;
	/**
		SERVER
		Returns the hitgroup where the player was last hit.
	**/
	#if SERVER @:native("lastHitGroup") public function lastHitGroup():Float;#end
}

@:forward
extern abstract Player(PlayerData) {
}

