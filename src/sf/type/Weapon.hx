// Generated by SFHaxe 0.3.0
package sf.type;
extern class WeaponData {
	/**
		SHARED
		 Returns the tool mode of the toolgun
	**/
	@:native("getToolMode") public function getToolMode():std.String;
	/**
		SHARED
		 Returns Ammo in primary clip
	**/
	@:native("clip1") public function clip1():Float;
	/**
		SHARED
		 Gets the next time the weapon can secondary fire.
	**/
	@:native("getNextSecondaryFire") public function getNextSecondaryFire():Float;
	/**
		SHARED
		 Returns Ammo in secondary clip
	**/
	@:native("clip2") public function clip2():Float;
	/**
		CLIENT
		 Gets Display name of weapon
	**/
	#if CLIENT @:native("getPrintName") public function getPrintName():std.String;#end
	/**
		SHARED
		 Gets the primary ammo type of the given weapon.
	**/
	@:native("getPrimaryAmmoType") public function getPrimaryAmmoType():Float;
	/**
		SHARED
		 Returns whether the weapon is visible
	**/
	@:native("isWeaponVisible") public function isWeaponVisible():Bool;
	/**
		SHARED
		 Turns a weapon into a string.
	**/
	@:native("__tostring") public function __tostring():std.String;
	/**
		CLIENT
		 Returns if the weapon is carried by the local player.
	**/
	#if CLIENT @:native("isCarriedByLocalPlayer") public function isCarriedByLocalPlayer():Bool;#end
	/**
		SHARED
		 Returns Maximum ammo in primary clip
	**/
	@:native("maxClip1") public function maxClip1():Float;
	/**
		SHARED
		 Returns the sequence enumeration number that the weapon is playing. Must be used on a view model.
	**/
	@:native("getActivity") public function getActivity():Float;
	/**
		SHARED
		 Gets the secondary ammo type of the given weapon.
	**/
	@:native("getSecondaryAmmoType") public function getSecondaryAmmoType():Float;
	/**
		SHARED
		 Returns the time since a weapon was last fired at a float variable
	**/
	@:native("lastShootTime") public function lastShootTime():Float;
	/**
		SHARED
		 Returns Maximum ammo in secondary clip
	**/
	@:native("maxClip2") public function maxClip2():Float;
	/**
		SHARED
		 Returns the hold type of the weapon.
	**/
	@:native("getHoldType") public function getHoldType():std.String;
	/**
		SHARED
		 Gets the next time the weapon can primary fire.
	**/
	@:native("getNextPrimaryFire") public function getNextPrimaryFire():Float;
}

@:forward
extern abstract Weapon(WeaponData) {
}

