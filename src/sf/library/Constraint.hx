// Generated by SFHaxe 0.3.3
package sf.library;
@:native("constraint") extern class Constraint {
	/**
		SERVER
		Elastic constraint between two entities
	**/
	#if SERVER @:native("elastic") public static function elastic(index:Float, e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, v1:sf.type.Vector, v2:sf.type.Vector, ?const:Null<Float>, ?damp:Null<Float>, ?rdamp:Null<Float>, ?width:Null<Float>, ?stretch:Null<Bool>):Void;#end
	/**
		SERVER
		Returns the table of constraints on an entity
	**/
	#if SERVER @:native("getTable") public static function getTable(ent:sf.type.Entity):lua.Table<Dynamic,Dynamic>;#end
	/**
		SERVER
		Welds two entities
	**/
	#if SERVER @:native("weld") public static function weld(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, ?force_lim:Null<Float>, ?nocollide:Null<Bool>):Void;#end
	/**
		SERVER
		Ballsocket two entities together. For more options, see constraint.ballsocketadv
	**/
	#if SERVER @:native("ballsocket") public static function ballsocket(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, pos:sf.type.Vector, ?force_lim:Null<Float>, ?torque_lim:Null<Float>, ?nocollide:Null<Bool>):Void;#end
	/**
		SERVER
		Breaks all constraints on an entity
	**/
	#if SERVER @:native("breakAll") public static function breakAll(e:sf.type.Entity):Void;#end
	/**
		SERVER
		Sets the constant of an elastic attached to the entity
	**/
	#if SERVER @:native("setElasticConstant") public static function setElasticConstant(index:Float, e:sf.type.Entity, constant:Float):Void;#end
	/**
		SERVER
		Ballsocket two entities together with more options
	**/
	#if SERVER @:native("ballsocketadv") public static function ballsocketadv(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, v1:sf.type.Vector, v2:sf.type.Vector, ?force_lim:Null<Float>, ?torque_lim:Null<Float>, ?minv:Null<sf.type.Vector>, ?maxv:Null<sf.type.Vector>, ?frictionv:Null<sf.type.Vector>, ?rotateonly:Null<Bool>, ?nocollide:Null<Bool>):Void;#end
	/**
		SERVER
		Sets whether the chip should remove created constraints when the chip is removed
	**/
	#if SERVER @:native("setConstraintClean") public static function setConstraintClean(on:Bool):Void;#end
	/**
		SERVER
		Sliders two entities
	**/
	#if SERVER @:native("slider") public static function slider(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, v1:sf.type.Vector, v2:sf.type.Vector, ?width:Null<Float>):Void;#end
	/**
		SERVER
		Axis two entities. v1 in e1's coordinates and v2 in e2's coordinates (or laxis in e1's coordinates again) define the axis
	**/
	#if SERVER @:native("axis") public static function axis(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, v1:sf.type.Vector, v2:sf.type.Vector, ?force_lim:Null<Float>, ?torque_lim:Null<Float>, ?friction:Null<Float>, ?nocollide:Null<Bool>, ?laxis:Null<sf.type.Vector>):Void;#end
	/**
		SERVER
		Breaks all constraints of a certain type on an entity
	**/
	#if SERVER @:native("breakType") public static function breakType(e:sf.type.Entity, typename:std.String):Void;#end
	/**
		SERVER
		Sets the length of an elastic attached to the entity
	**/
	#if SERVER @:native("setElasticLength") public static function setElasticLength(index:Float, e:sf.type.Entity, length:Float):Void;#end
	/**
		SERVER
		Nocollides two entities
	**/
	#if SERVER @:native("nocollide") public static function nocollide(e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>):Void;#end
	/**
		SERVER
		Applies a keepupright constraint on an entity
	**/
	#if SERVER @:native("keepupright") public static function keepupright(e:sf.type.Entity, ang:sf.type.Angle, bone:Float, lim:Float):Void;#end
	/**
		SERVER
		Sets the damping of an elastic attached to the entity
	**/
	#if SERVER @:native("setElasticDamping") public static function setElasticDamping(index:Float, e:sf.type.Entity, damping:Float):Void;#end
	/**
		SERVER
		Checks how many constraints can be spawned
	**/
	#if SERVER @:native("constraintsLeft") public static function constraintsLeft():Float;#end
	/**
		SERVER
		Creates a rope between two entities
	**/
	#if SERVER @:native("rope") public static function rope(index:Float, e1:sf.type.Entity, e2:sf.type.Entity, ?bone1:Null<Float>, ?bone2:Null<Float>, v1:sf.type.Vector, v2:sf.type.Vector, ?length:Null<Float>, ?addlength:Null<Float>, ?force_lim:Null<Float>, ?width:Null<Float>, ?materialName:Null<std.String>, ?rigid:Null<Bool>, ?color:Null<sf.type.Color>):Void;#end
}

