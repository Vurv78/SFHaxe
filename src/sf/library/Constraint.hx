// Generated by SFHaxe 0.2.0
package sf.library;
@:native("constraint") extern class Constraint {
	/**
		SERVER
		 Creates a rope between two entities
	**/
	#if SERVER @:native("rope") public static function rope(index:Any, e1:Any, e2:Any, bone1:Any, bone2:Any, v1:Any, v2:Any, length:Any, addlength:Any, force_lim:Any, width:Any, material:Any, rigid:Any):Void;#end
	/**
		SERVER
		 Ballsocket two entities together. For more options, see constraint.ballsocketadv
	**/
	#if SERVER @:native("ballsocket") public static function ballsocket(e1:Any, e2:Any, bone1:Any, bone2:Any, pos:Any, force_lim:Any, torque_lim:Any, nocollide:Any):Void;#end
	/**
		SERVER
		 Sets the length of a rope attached to the entity
	**/
	#if SERVER @:native("setRopeLength") public static function setRopeLength(index:Any, e:Any, length:Any):Void;#end
	/**
		SERVER
		 Checks how many constraints can be spawned
	**/
	#if SERVER @:native("constraintsLeft") public static function constraintsLeft():Any;#end
	/**
		SERVER
		 Sets the length of an elastic attached to the entity
	**/
	#if SERVER @:native("setElasticLength") public static function setElasticLength(index:Any, e:Any, length:Any):Void;#end
	/**
		SERVER
		 Sliders two entities
	**/
	#if SERVER @:native("slider") public static function slider(e1:Any, e2:Any, bone1:Any, bone2:Any, v1:Any, v2:Any, width:Any):Void;#end
	/**
		SERVER
		 Sets whether the chip should remove created constraints when the chip is removed
	**/
	#if SERVER @:native("setConstraintClean") public static function setConstraintClean(on:Any):Void;#end
	/**
		SERVER
		 Ballsocket two entities together with more options
	**/
	#if SERVER @:native("ballsocketadv") public static function ballsocketadv(e1:Any, e2:Any, bone1:Any, bone2:Any, v1:Any, v2:Any, force_lim:Any, torque_lim:Any, minv:Any, maxv:Any, frictionv:Any, rotateonly:Any, nocollide:Any):Void;#end
	/**
		SERVER
		 Nocollides two entities
	**/
	#if SERVER @:native("nocollide") public static function nocollide(e1:Any, e2:Any, bone1:Any, bone2:Any):Void;#end
	/**
		SERVER
		 Breaks all constraints of a certain type on an entity
	**/
	#if SERVER @:native("breakType") public static function breakType(e:Any, typename:Any):Void;#end
	/**
		SERVER
		 Welds two entities
	**/
	#if SERVER @:native("weld") public static function weld(e1:Any, e2:Any, bone1:Any, bone2:Any, force_lim:Any, nocollide:Any):Void;#end
	/**
		SERVER
		 Axis two entities. v1 in e1's coordinates and v2 in e2's coodinates (or laxis in e1's coordinates again) define the axis
	**/
	#if SERVER @:native("axis") public static function axis(e1:Any, e2:Any, bone1:Any, bone2:Any, v1:Any, v2:Any, force_lim:Any, torque_lim:Any, friction:Any, nocollide:Any, laxis:Any):Void;#end
	/**
		SERVER
		 Returns the table of constraints on an entity
	**/
	#if SERVER @:native("getTable") public static function getTable(ent:Any):Any;#end
	/**
		SERVER
		 Breaks all constraints on an entity
	**/
	#if SERVER @:native("breakAll") public static function breakAll(e:Any):Void;#end
	/**
		SERVER
		 Elastic constraint between two entities
	**/
	#if SERVER @:native("elastic") public static function elastic(index:Any, e1:Any, e2:Any, bone1:Any, bone2:Any, v1:Any, v2:Any, const:Any, damp:Any, rdamp:Any, width:Any, strech:Any):Void;#end
}

