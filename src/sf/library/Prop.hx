// Generated by SFHaxe 0.3.2
package sf.library;
@:native("prop") extern class Prop {
	/**
		SERVER
		 Creates starfall component
		 Allowed components:
		 starfall_hud
		 starfall_screen
	**/
	#if SERVER @:native("createComponent") public static function createComponent(pos:sf.type.Vector, ang:sf.type.Angle, _class:std.String, model:std.String, frozen:Bool):sf.type.Entity;#end
	/**
		SERVER
		 Sets whether the props should be undo-able
	**/
	#if SERVER @:native("setPropUndo") public static function setPropUndo(on:Bool):Void;#end
	/**
		SERVER
		 Checks if a user can spawn anymore props.
	**/
	#if SERVER @:native("canSpawn") public static function canSpawn():Bool;#end
	/**
		SERVER
		 Returns how many props per second the user can spawn
	**/
	#if SERVER @:native("spawnRate") public static function spawnRate():Float;#end
	/**
		SERVER
		 Get a list of all spawnable sents.
	**/
	#if SERVER @:native("getSpawnableSents") public static function getSpawnableSents(?categorized:Null<Bool>):lua.Table<Dynamic,Dynamic>;#end
	/**
		SERVER
		 Creates a sent.
	**/
	#if SERVER @:native("createSent") public static function createSent(pos:sf.type.Vector, ang:sf.type.Angle, _class:std.String, frozen:Bool, ?data:Null<lua.Table<Dynamic,Dynamic>>):sf.type.Entity;#end
	/**
		SERVER
		 Creates a prop
	**/
	#if SERVER @:native("create") public static function create(pos:sf.type.Vector, ang:sf.type.Angle, model:std.String, ?frozen:Null<Bool>):sf.type.Entity;#end
	/**
		SERVER
		 Sets whether the chip should remove created props when the chip is removed
	**/
	#if SERVER @:native("setPropClean") public static function setPropClean(on:Bool):Void;#end
	/**
		SERVER
		 Creates a custom prop.
	**/
	#if SERVER @:native("createCustom") public static function createCustom(pos:sf.type.Vector, ang:sf.type.Angle, vertices:lua.Table<Dynamic,Dynamic>, frozen:Bool):sf.type.Entity;#end
	/**
		SERVER
		 Creates a ragdoll
	**/
	#if SERVER @:native("createRagdoll") public static function createRagdoll(model:std.String, ?frozen:Null<Bool>):sf.type.Entity;#end
	/**
		SERVER
		 Checks how many props can be spawned
	**/
	#if SERVER @:native("propsLeft") public static function propsLeft():Float;#end
}

