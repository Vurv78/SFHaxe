// Generated by SFHaxe 0.3.3
package sf.library;
@:native("file") extern class File {
	/**
		CLIENT
		Enumerates a directory relative to gmod
	**/
	#if CLIENT @:native("findInGame") public static function findInGame(path:std.String, ?sorting:Null<std.String>):lua.Table<Dynamic,Dynamic>;#end
	/**
		CLIENT
		Deletes a file
	**/
	#if CLIENT @:native("delete") public static function delete(path:std.String):Null<Bool>;#end
	/**
		CLIENT
		Writes a temporary file. Throws an error if it is unable to.
	**/
	#if CLIENT @:native("writeTemp") public static function writeTemp(filename:std.String, data:std.String):std.String;#end
	/**
		CLIENT
		Reads a temp file's data if it exists. Otherwise returns nil
	**/
	#if CLIENT @:native("readTemp") public static function readTemp(filename:std.String):Null<std.String>;#end
	/**
		CLIENT
		Returns when the file or folder was last modified in Unix time.
		Can then be used with something like os.date for a human-readable date.
	**/
	#if CLIENT @:native("time") public static function time(path:std.String):Float;#end
	/**
		CLIENT
		Appends a string to the end of a file
	**/
	#if CLIENT @:native("append") public static function append(path:std.String, data:std.String):Void;#end
	/**
		CLIENT
		Opens and returns a file
	**/
	#if CLIENT @:native("open") public static function open(path:std.String, mode:std.String):Null<sf.type.File>;#end
	/**
		CLIENT
		Writes to a file. Throws an error if it failed to write
	**/
	#if CLIENT @:native("write") public static function write(path:std.String, data:std.String):Void;#end
	/**
		CLIENT
		Reads a file from path
	**/
	#if CLIENT @:native("read") public static function read(path:std.String):Null<std.String>;#end
	/**
		CLIENT
		Checks if a file exists
	**/
	#if CLIENT @:native("exists") public static function exists(path:std.String):Null<Bool>;#end
	/**
		CLIENT
		Creates a directory
	**/
	#if CLIENT @:native("createDir") public static function createDir(path:std.String):Void;#end
	/**
		CLIENT
		Reads a file asynchronously. Can only read 'sf_file_asyncmax' files at a time
	**/
	#if CLIENT @:native("asyncRead") public static function asyncRead(path:std.String, callback:haxe.Constraints.Function):Void;#end
	/**
		CLIENT
		Returns the path of a temp file if it exists. Otherwise returns nil
	**/
	#if CLIENT @:native("existsTemp") public static function existsTemp(filename:std.String):Null<std.String>;#end
	/**
		CLIENT
		Enumerates a directory
	**/
	#if CLIENT @:native("find") public static function find(path:std.String, ?sorting:Null<std.String>):lua.Table<Dynamic,Dynamic>;#end
}

