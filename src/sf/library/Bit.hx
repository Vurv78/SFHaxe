// Generated by SFHaxe 0.3.3
package sf.library;
@:native("bit") extern class Bit {
	/**
		SHARED
		Returns the hexadecimal representation of the number with the specified digits.
	**/
	@:native("tohex") public static function tohex(value:Float, ?digits:Null<Float>):std.String;
	/**
		SHARED
		Normalizes the specified value and clamps it in the range of a signed 32bit integer.
	**/
	@:native("tobit") public static function tobit(value:Float):Float;
	/**
		SHARED
		Returns the right shifted value.
	**/
	@:native("rshift") public static function rshift(value:Float, shiftCount:Float):Float;
	/**
		SHARED
		Decompresses a string using LZMA.
		XZ Utils will always produce streamed (i.e. the decompressed size is not specified in the header) LZMA data. If you're trying to compress data from outside of GMod and then decompress it inside of GMod, it probably won't work unless you use the older, deprecated 'LZMA Utils', or util.Compress.
	**/
	@:native("decompress") public static function decompress(s:std.String, ?maxSize:Null<Float>):Null<std.String>;
	/**
		SHARED
		Converts a table to string serializing data types as best as it can
	**/
	@:native("tableToString") public static function tableToString(t:lua.Table<Dynamic,Dynamic>):std.String;
	/**
		SHARED
		Performs the bitwise "and" for all values specified.
	**/
	@:native("band") public static function band(value:Float, otherValues:...Float):Float;
	/**
		SHARED
		Returns the bitwise not of the value.
	**/
	@:native("bnot") public static function bnot(value:Float):Float;
	/**
		SHARED
		Returns the bitwise xor of all values specified.
	**/
	@:native("bxor") public static function bxor(value:Float, otherValues:...Float):Float;
	/**
		SHARED
		Returns the bitwise OR of all values specified.
	**/
	@:native("bor") public static function bor(value1:Float, Extra:...Float):Float;
	/**
		SHARED
		Generates the SHA-1 Checksum of the specified string.
	**/
	@:native("sha1") public static function sha1(s:std.String):std.String;
	/**
		SHARED
		Creates a StringStream object
	**/
	@:native("stringstream") public static function stringstream(stream:std.String, i:Float, endian:std.String):sf.type.StringStream;
	/**
		SHARED
		Returns the left shifted value.
	**/
	@:native("lshift") public static function lshift(value:Float, shiftCount:Float):Float;
	/**
		SHARED
		Returns the arithmetically shifted value.
	**/
	@:native("arshift") public static function arshift(value:Float, shiftCount:Float):Float;
	/**
		SHARED
		Returns the right rotated value.
	**/
	@:native("ror") public static function ror(value:Float, shiftCount:Float):Float;
	/**
		SHARED
		Converts serialized string data to table
	**/
	@:native("stringToTable") public static function stringToTable(s:std.String):lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Compresses a string using LZMA.
	**/
	@:native("compress") public static function compress(s:std.String):Null<std.String>;
	/**
		SHARED
		Swaps the byte order.
	**/
	@:native("bswap") public static function bswap(value:Float):Float;
	/**
		SHARED
		Generates the MD5 Checksum of the specified string.
	**/
	@:native("md5") public static function md5(s:std.String):std.String;
	/**
		SHARED
		Generates the SHA-256 Checksum of the specified string.
	**/
	@:native("sha256") public static function sha256(s:std.String):std.String;
	/**
		SHARED
		Returns the left rotated value.
	**/
	@:native("rol") public static function rol(value:Float, shiftCount:Float):Float;
}

