// Generated by SFHaxe 0.3.3
package sf.library;
@:native("math") extern class Math {
	/**
		SHARED
		Returns the x power of the Euler constant.
	**/
	@:native("exp") public static function exp(x:Float):Float;
	/**
		SHARED
		Rounds a number up.
	**/
	@:native("ceil") public static function ceil(n:Float):Float;
	/**
		SHARED
		Functions like math.atan(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.
	**/
	@:native("atan2") public static function atan2(y:Float, x:Float):Float;
	/**
		SHARED
		Eases in by raising the fraction to the power of 5.
	**/
	@:native("easeInQuint") public static function easeInQuint(fraction:Float):Float;
	/**
		SHARED
		Remaps the value from one range to another.
	**/
	@:native("remap") public static function remap(value:Float, inMin:Float, inMax:Float, outMin:Float, outMax:Float):Float;
	/**
		SHARED
		Eases in and out using a circular function.
	**/
	@:native("easeInOutCirc") public static function easeInOutCirc(fraction:Float):Float;
	/**
		SHARED
		Calculates the fraction of where the current time is relative to the start and end times.
	**/
	@:native("timeFraction") public static function timeFraction(start:Float, end:Float, current:Float):Float;
	/**
		SHARED
		Converts an integer to a binary (base-2) string.
	**/
	@:native("intToBin") public static function intToBin(int:Float):std.String;
	/**
		SHARED
		Eases in and out like a rubber band.
	**/
	@:native("easeInOutElastic") public static function easeInOutElastic(fraction:Float):Float;
	/**
		SHARED
		Increments an angle towards another by specified rate.
	**/
	@:native("approachAngle") public static function approachAngle(currentAngle:Float, targetAngle:Float, rate:Float):Float;
	/**
		SHARED
		Eases in by reversing the direction of the ease slightly before returning.
	**/
	@:native("easeInBack") public static function easeInBack(fraction:Float):Float;
	/**
		SHARED
		Eases in and out by cubing the fraction.
	**/
	@:native("easeInOutCubic") public static function easeInOutCubic(fraction:Float):Float;
	/**
		SHARED
		Converts radians to degrees
	**/
	@:native("deg") public static function deg(rad:Float):Float;
	/**
		SHARED
		Generates a random float value that should be the same on client and server
	**/
	@:native("sharedRandom") public static function sharedRandom(uniqueName:std.String, Min:Float, Max:Float, ?additionalSeed:Null<Float>):Float;
	/**
		SHARED
		Calculates an angle in radians, in the range -pi/2 to pi/2, which has the given tangent.
	**/
	@:native("atan") public static function atan(tan:Float):Float;
	/**
		SHARED
		eturns x raised to the power y
	**/
	@:native("pow") public static function pow(base:Float, exp:Float):Float;
	/**
		SHARED
		Calculates square root of the number.
	**/
	@:native("sqrt") public static function sqrt(value:Float):Float;
	/**
		SHARED
		Returns a random float between min and max.
	**/
	@:native("rand") public static function rand(min:Float, max:Float):Float;
	/**
		SHARED
		Calculates the modulus of the specified values.
	**/
	@:native("fmod") public static function fmod(base:Float, mod:Float):Float;
	/**
		SHARED
		Clamps a number between a minimum and maximum value.
	**/
	@:native("clamp") public static function clamp(current:Float, min:Float, max:Float):Float;
	/**
		SHARED
		Calculates an angle in radians, between 0 and pi, which has the given cos value.
	**/
	@:native("acos") public static function acos(cos:Float):Float;
	/**
		SHARED
		Returns the integral and fractional component of the modulo operation.
	**/
	@:native("modf") public static function modf(base:Float):Float;
	/**
		SHARED
		Eases out by cubing the fraction.
	**/
	@:native("easeOutCubic") public static function easeOutCubic(fraction:Float):Float;
	/**
		SHARED
		Eases in using an exponential equation with a base of 2 and where the fraction is used in the exponent.
	**/
	@:native("easeInExpo") public static function easeInExpo(fraction:Float):Float;
	/**
		SHARED
		Calculates the difference between two angles.
	**/
	@:native("angleDifference") public static function angleDifference(a:Float, b:Float):Float;
	/**
		SHARED
		Calculates the absolute value of a number (effectively removes any negative sign).
	**/
	@:native("abs") public static function abs(x:Float):Float;
	/**
		SHARED
		Calculates point between first and second vector using given fraction and linear interpolation.
	**/
	@:native("lerpVector") public static function lerpVector(ratio:Float, from:sf.type.Vector, Vector:sf.type.Vector):sf.type.Vector;
	/**
		SHARED
		Eases in and out like a bouncy ball.
	**/
	@:native("easeInOutBounce") public static function easeInOutBounce(fraction:Float):Float;
	/**
		SHARED
		Converts an angle from degrees to radians.
	**/
	@:native("rad") public static function rad(deg:Float):Float;
	/**
		SHARED
		Eases out using a circular function.
	**/
	@:native("easeOutCirc") public static function easeOutCirc(fraction:Float):Float;
	/**
		SHARED
		Gets the distance between a line and a point in 3d space
	**/
	@:native("distanceToLine") public static function distanceToLine(lineStart:sf.type.Vector, lineEnd:sf.type.Vector, pointPos:sf.type.Vector):Float;
	/**
		SHARED
		Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).
	**/
	@:native("log10") public static function log10(x:Float):Float;
	/**
		SHARED
		Calculates an angle in radians, in the range -pi/2 to pi/2, which has the given sine value.
	**/
	@:native("asin") public static function asin(sin:Float):Float;
	/**
		SHARED
		Calculates hyperbolic tangent of the given angle.
	**/
	@:native("tanh") public static function tanh(ang:Float):Float;
	/**
		SHARED
		Gradually approaches the target value by the specified amount.
	**/
	@:native("approach") public static function approach(current:Float, target:Float, change:Float):Float;
	/**
		SHARED
		Basic code for Bezier-Spline algorithm.
	**/
	@:native("calcBSplineN") public static function calcBSplineN(i:Float, k:Float, t:Float, tinc:Float):Float;
	/**
		SHARED
		Eases in by cubing the fraction.
	**/
	@:native("easeInCubic") public static function easeInCubic(fraction:Float):Float;
	/**
		SHARED
		Calculates hyperbolic cosine of the given angle.
	**/
	@:native("cosh") public static function cosh(angle:Float):Float;
	/**
		SHARED
		Eases out like a bouncy ball.
	**/
	@:native("easeOutBounce") public static function easeOutBounce(fraction:Float):Float;
	/**
		SHARED
		Performs normalized linear interpolation between two quaternions
	**/
	@:native("nlerpQuaternion") public static function nlerpQuaternion(quat1:sf.type.Quaternion, quat2:sf.type.Quaternion, t:Float):sf.type.Quaternion;
	/**
		SHARED
		Eases in using a circular function.
	**/
	@:native("easeInCirc") public static function easeInCirc(fraction:Float):Float;
	/**
		SHARED
		Calculates the sign of a number
	**/
	@:native("sign") public static function sign(x:Float):Float;
	/**
		SHARED
		Rounds a number down.
	**/
	@:native("floor") public static function floor(n:Float):Float;
	/**
		SHARED
		Calculates the hyperbolic sine of the given angle.
	**/
	@:native("sinh") public static function sinh(ang:Float):Float;
	/**
		SHARED
		Eases out like a rubber band.
	**/
	@:native("easeOutElastic") public static function easeOutElastic(fraction:Float):Float;
	/**
		SHARED
		Rounds the given value to the nearest whole number or to the given decimal places.
	**/
	@:native("round") public static function round(value:Float, ?decimals:Null<Float>):Void;
	/**
		SHARED
		Performs a linear interpolation from the start number to the end number.
	**/
	@:native("lerp") public static function lerp(t:Float, from:Float, to:Float):Float;
	/**
		SHARED
		Calculates point between first and second angle using given fraction and linear interpolation.
	**/
	@:native("lerpAngle") public static function lerpAngle(ratio:Float, from:Float, to:Float):Float;
	/**
		SHARED
		Rounds towards zero
	**/
	@:native("truncate") public static function truncate(val:Float, ?digits:Null<Float>):Float;
	/**
		SHARED
		Used to split the number value into a normalized fraction and an exponent
	**/
	@:native("frexp") public static function frexp(x:Float):Float;
	/**
		SHARED
		When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
		When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
		When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
	**/
	@:native("random") public static function random(?m:Null<Float>, ?n:Null<Float>):Float;
	/**
		SHARED
		Eases in and out by reversing the direction of the ease slightly before returning on both ends.
	**/
	@:native("easeInOutBack") public static function easeInOutBack(fraction:Float):Float;
	/**
		SHARED
		With one argument, returns the natural logarithm of x (to base e).
		With two arguments, return the logarithm of x to the given base, calculated as log(x) / log(base).
	**/
	@:native("log") public static function log(x:Float, ?base:Null<Float>):Float;
	/**
		SHARED
		Eases in and out by squaring the fraction.
	**/
	@:native("easeInOutQuad") public static function easeInOutQuad(fraction:Float):Float;
	/**
		SHARED
		Calculates B-Spline point.
	**/
	@:native("bSplinePoint") public static function bSplinePoint(tDiff:Float, tPoints:Float, tMax:Float):Float;
	/**
		SHARED
		Eases out using math.sin.
	**/
	@:native("easeOutSine") public static function easeOutSine(fraction:Float):Float;
	/**
		SHARED
		Takes a normalised number and returns the floating point representation.
	**/
	@:native("ldexp") public static function ldexp(normalizedFraction:Float, exponent:Float):Float;
	/**
		SHARED
		Calculates the tangent of the given angle.
	**/
	@:native("tan") public static function tan(ang:Float):Float;
	/**
		SHARED
		Picks the smallest value of all provided arguments.
	**/
	@:native("min") public static function min(numbers:...Float):Float;
	/**
		SHARED
		Calculates cosine of the given angle.
	**/
	@:native("cos") public static function cos(angle:Float):Float;
	/**
		SHARED
		Picks the largest value of all provided arguments.
	**/
	@:native("max") public static function max(numbers:...Float):Float;
	/**
		SHARED
		Eases in by squaring the fraction.
	**/
	@:native("easeInQuad") public static function easeInQuad(fraction:Float):Float;
	/**
		SHARED
		Eases in and out using math.sin.
	**/
	@:native("easeInOutSine") public static function easeInOutSine(fraction:Float):Float;
	/**
		SHARED
		Eases in and out using an exponential equation with a base of 2 and where the fraction is used in the exponent.
	**/
	@:native("easeInOutExpo") public static function easeInOutExpo(fraction:Float):Float;
	/**
		SHARED
		Calculates the difference between two points in 2D space
	**/
	@:native("distance") public static function distance(x1:Float, y1:Float, x2:Float, y2:Float):Float;
	/**
		SHARED
		Eases in and out by raising the fraction to the power of 5.
	**/
	@:native("easeInOutQuint") public static function easeInOutQuint(fraction:Float):Float;
	/**
		SHARED
		Eases out by raising the fraction to the power of 4.
	**/
	@:native("easeOutQuart") public static function easeOutQuart(fraction:Float):Float;
	/**
		SHARED
		Calculates the progress of a value fraction, taking in to account given easing fractions.
	**/
	@:native("easeInOut") public static function easeInOut(progress:Float, easeIn:Float, easeOut:Float):Float;
	/**
		SHARED
		Eases in like a bouncy ball.
	**/
	@:native("easeInBounce") public static function easeInBounce(fraction:Float):Float;
	/**
		SHARED
		Calculates the sine of given angle.
	**/
	@:native("sin") public static function sin(ang:Float):Float;
	/**
		SHARED
		Eases in using math.sin.
	**/
	@:native("easeInSine") public static function easeInSine(fraction:Float):Float;
	/**
		SHARED
		Eases in like a rubber band.
	**/
	@:native("easeInElastic") public static function easeInElastic(fraction:Float):Float;
	/**
		SHARED
		Performs spherical linear interpolation between two quaternions
	**/
	@:native("slerpQuaternion") public static function slerpQuaternion(quat1:sf.type.Quaternion, quat2:sf.type.Quaternion, t:Float):sf.type.Quaternion;
	/**
		SHARED
		Normalizes angle, so it returns value between -180 and 180.
	**/
	@:native("normalizeAngle") public static function normalizeAngle(ang:Float):Float;
	/**
		SHARED
		Eases out by reversing the direction of the ease slightly before finishing.
	**/
	@:native("easeOutBack") public static function easeOutBack(fraction:Float):Float;
	/**
		SHARED
		Converts a binary string into a number.
	**/
	@:native("binToInt") public static function binToInt(str:std.String):Float;
	/**
		SHARED
		Eases out by raising the fraction to the power of 5.
	**/
	@:native("easeOutQuint") public static function easeOutQuint(fraction:Float):Float;
	/**
		SHARED
		Eases in by raising the fraction to the power of 4.
	**/
	@:native("easeInQuart") public static function easeInQuart(fraction:Float):Float;
}

