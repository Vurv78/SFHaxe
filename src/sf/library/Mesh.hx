// Generated by SFHaxe 0.2.0
package sf.library;
@:native("mesh") extern class Mesh {
	/**
		CLIENT
		 Creates a mesh without any vertex data.
	**/
	#if CLIENT @:native("createEmpty") public static function createEmpty():Any;#end
	/**
		SHARED
		 Parses obj data into a table of vertices, normals, texture coordinates, colors, and tangents
	**/
	@:native("parseObj") public static function parseObj(obj:Any, threaded:Any, triangulate:Any):Any;
	/**
		CLIENT
		 Sets the vertex normal
	**/
	#if CLIENT @:native("writeNormal") public static function writeNormal(normal:Any):Void;#end
	/**
		SHARED
		 Generates the uv for the provided vertices table
	**/
	@:native("generateUV") public static function generateUV(vertices:Any, scale:Any):Void;
	/**
		CLIENT
		 Returns a table of visual meshes of given model or nil if the model is invalid
	**/
	#if CLIENT @:native("getModelMeshes") public static function getModelMeshes(model:Any, lod:Any, bodygroupMask:Any):Any;#end
	/**
		CLIENT
		 Creates a mesh from vertex data.
	**/
	#if CLIENT @:native("createFromTable") public static function createFromTable(verteces:Any, threaded:Any):Any;#end
	/**
		CLIENT
		 Pushes the vertex data onto the render stack
	**/
	#if CLIENT @:native("advanceVertex") public static function advanceVertex():Void;#end
	/**
		CLIENT
		 Sets the vertex position
	**/
	#if CLIENT @:native("writePosition") public static function writePosition(position:Any):Void;#end
	/**
		CLIENT
		 Returns how many triangles can be rendered
	**/
	#if CLIENT @:native("trianglesLeftRender") public static function trianglesLeftRender():Any;#end
	/**
		CLIENT
		 Creates a mesh from an obj file. Only supports triangular meshes with normals and texture coordinates.
	**/
	#if CLIENT @:native("createFromObj") public static function createFromObj(obj:Any, threaded:Any, triangulate:Any):Any;#end
	/**
		SHARED
		 Generates normal vectors for the provided vertices table
	**/
	@:native("generateNormals") public static function generateNormals(vertices:Any, inverted:Any, smooth_limit:Any):Void;
	/**
		CLIENT
		 Generates mesh data. If an Mesh object is passed, it will populate that mesh with the data. Otherwise, it will render directly to renderer.
	**/
	#if CLIENT @:native("generate") public static function generate(mesh_obj:Any, prim_type:Any, prim_count:Any, func:Any):Void;#end
	/**
		CLIENT
		 Sets the vertex texture coordinates
	**/
	#if CLIENT @:native("writeUV") public static function writeUV(stage:Any, u:Any, v:Any):Void;#end
	/**
		SHARED
		 Generates the tangents for the provided vertices table
	**/
	@:native("generateTangents") public static function generateTangents(vertices:Any):Void;
	/**
		CLIENT
		 Sets the vertex color by RGBA values
	**/
	#if CLIENT @:native("writeColor") public static function writeColor(r:Any, g:Any, b:Any, a:Any):Void;#end
	/**
		CLIENT
		 Draws a quad using 4 vertices
	**/
	#if CLIENT @:native("writeQuad") public static function writeQuad(v1:Any, v2:Any, v3:Any, v4:Any):Void;#end
	/**
		CLIENT
		 Returns how many triangles can be created
	**/
	#if CLIENT @:native("trianglesLeft") public static function trianglesLeft():Any;#end
	/**
		CLIENT
		 Draws a quad using a position, normal and size
	**/
	#if CLIENT @:native("writeQuadEasy") public static function writeQuadEasy(position:Any, normal:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Sets the vertex tangent user data
	**/
	#if CLIENT @:native("writeUserData") public static function writeUserData(x:Any, y:Any, z:Any, handedness:Any):Void;#end
}

