// Generated by SFHaxe 0.2.0
package sf.library;
@:native("render") extern class Render {
	/**
		CLIENT
		 Sets the active texture to the render target with the specified name.
		 Nil to reset.
	**/
	#if CLIENT @:native("setRenderTargetTexture") public static function setRenderTargetTexture(name:Any):Void;#end
	/**
		CLIENT
		 Returns the entity currently being rendered to
	**/
	#if CLIENT @:native("getScreenEntity") public static function getScreenEntity():Any;#end
	/**
		CLIENT
		 Sets the compare function of the stencil. More: https://wiki.facepunch.com/gmod/render.SetStencilCompareFunction
	**/
	#if CLIENT @:native("setStencilCompareFunction") public static function setStencilCompareFunction(compareFunction:Any):Void;#end
	/**
		CLIENT
		 Enables a scissoring rect which limits the drawing area. Only works 2D contexts such as HUD or render targets.
	**/
	#if CLIENT @:native("enableScissorRect") public static function enableScissorRect(startX:Any, startY:Any, endX:Any, endX:Any):Void;#end
	/**
		CLIENT
		 Returns the ambient color of the map
	**/
	#if CLIENT @:native("getAmbientLightColor") public static function getAmbientLightColor():Any;#end
	/**
		CLIENT
		 Sets the draw color by RGBA values
	**/
	#if CLIENT @:native("setRGBA") public static function setRGBA(r:Any, g:Any, b:Any, a:Any):Void;#end
	/**
		CLIENT
		 Sets the font
		 Use a font created by render.createFont or use one of these already defined fonts:
		 \- DebugFixed
		 \- DebugFixedSmall
		 \- Default
		 \- Marlett
		 \- Trebuchet18
		 \- Trebuchet24
		 \- HudHintTextLarge
		 \- HudHintTextSmall
		 \- CenterPrintText
		 \- HudSelectionText
		 \- CloseCaption_Normal
		 \- CloseCaption_Bold
		 \- CloseCaption_BoldItalic
		 \- ChatFont
		 \- TargetID
		 \- TargetIDSmall
		 \- HL2MPTypeDeath
		 \- BudgetLabel
		 \- HudNumbers
		 \- DermaDefault
		 \- DermaDefaultBold
		 \- DermaLarge
	**/
	#if CLIENT @:native("setFont") public static function setFont(font:Any):Void;#end
	/**
		CLIENT
		 Clears the current rendertarget for obeying the current stencil buffer conditions.
	**/
	#if CLIENT @:native("clearBuffersObeyStencil") public static function clearBuffersObeyStencil(r:Any, g:Any, b:Any, depth:Any):Void;#end
	/**
		CLIENT
		 Returns how many render.renderView calls can be done in the current frame.
	**/
	#if CLIENT @:native("renderViewsLeft") public static function renderViewsLeft():Void;#end
	/**
		CLIENT
		 Returns whether render.renderView is being executed.
	**/
	#if CLIENT @:native("isInRenderView") public static function isInRenderView():Void;#end
	/**
		CLIENT
		 Sets the lighting mode
	**/
	#if CLIENT @:native("setLightingMode") public static function setLightingMode(mode:Any):Void;#end
	/**
		CLIENT
		 Pops a view matrix from the matrix stack.
	**/
	#if CLIENT @:native("popViewMatrix") public static function popViewMatrix():Void;#end
	/**
		CLIENT
		 Enables blend mode control. Read OpenGL or DirectX docs for more info
	**/
	#if CLIENT @:native("overrideBlend") public static function overrideBlend(on:Any, srcBlend:Any, destBlend:Any, blendFunc:Any, srcBlendAlpha:Any, destBlendAlpha:Any, blendFuncAlpha:Any):Void;#end
	/**
		CLIENT
		 Sets the height below which fog will be rendered. Only works with fog mode 2
	**/
	#if CLIENT @:native("setFogHeight") public static function setFogHeight():Void;#end
	/**
		CLIENT
		 Draws a circle outline
	**/
	#if CLIENT @:native("drawCircle") public static function drawCircle(x:Any, y:Any, r:Any):Void;#end
	/**
		CLIENT
		 Draws region of RGBA color channel tables to current render target.
	**/
	#if CLIENT @:native("drawPixelsSubrectRGBA") public static function drawPixelsSubrectRGBA(dstX:Any, dstY:Any, srcX:Any, srcY:Any, srcW:Any, srcH:Any, subrectW:Any, subrectH:Any, dataR:Any, dataG:Any, dataB:Any, dataA:Any):Void;#end
	/**
		CLIENT
		 Checks if a hud component is connected to the Starfall Chip
	**/
	#if CLIENT @:native("isHUDActive") public static function isHUDActive():Void;#end
	/**
		CLIENT
		 Draws a rotated, textured rectangle.
		 Faster, but uses integer coordinates and will get clipped by user's screen resolution
	**/
	#if CLIENT @:native("drawTexturedRectRotatedFast") public static function drawTexturedRectRotatedFast(x:Any, y:Any, w:Any, h:Any, rot:Any):Void;#end
	/**
		CLIENT
		 Gets the default font
	**/
	#if CLIENT @:native("getDefaultFont") public static function getDefaultFont():Any;#end
	/**
		CLIENT
		 Sets the texture filtering function when viewing a far texture
	**/
	#if CLIENT @:native("setFilterMin") public static function setFilterMin(val:Any):Void;#end
	/**
		CLIENT
		 Draws RGBA color channel tables to current render target.
	**/
	#if CLIENT @:native("drawPixelsRGBA") public static function drawPixelsRGBA(w:Any, h:Any, dataR:Any, dataG:Any, dataB:Any, dataA:Any):Void;#end
	/**
		CLIENT
		 Draws text with newlines and tabs
	**/
	#if CLIENT @:native("drawText") public static function drawText(x:Any, y:Any, text:Any, alignment:Any):Void;#end
	/**
		CLIENT
		 Draws a rounded rectangle using the current color
	**/
	#if CLIENT @:native("drawRoundedBox") public static function drawRoundedBox(r:Any, x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Renders the scene with the specified viewData to the current active render target.
	**/
	#if CLIENT @:native("renderView") public static function renderView(tbl:Any):Void;#end
	/**
		CLIENT
		 Sets the status of the clip renderer, returning previous state.
	**/
	#if CLIENT @:native("enableClipping") public static function enableClipping(state:Any):Any;#end
	/**
		CLIENT
		 Draws text more easily and quickly but no new lines or tabs.
	**/
	#if CLIENT @:native("drawSimpleText") public static function drawSimpleText(x:Any, y:Any, text:Any, xalign:Any, yalign:Any):Void;#end
	/**
		CLIENT
		 Draws a box in 3D space
	**/
	#if CLIENT @:native("draw3DBox") public static function draw3DBox(origin:Any, angle:Any, mins:Any, maxs:Any):Void;#end
	/**
		CLIENT
		 Looks up a texture by file name and creates an UnlitGeneric material with it.
		 Also supports image URLs or image data (These will create a rendertarget for the $basetexture): https://en.wikipedia.org/wiki/Data_URI_scheme
		 Make sure to store the material to use it rather than calling this slow function repeatedly.
		 NOTE: This no longer supports material names. Use texture names instead (Textures are .vtf, material are .vmt)
	**/
	#if CLIENT @:native("createMaterial") public static function createMaterial(tx:Any, cb:Any, done:Any):Any;#end
	/**
		CLIENT
		 Sets the stencil value in a specified rect.
	**/
	#if CLIENT @:native("clearStencilBufferRectangle") public static function clearStencilBufferRectangle(originX:Any, originY:Any, endX:Any, endY:Any, stencilValue:Any):Void;#end
	/**
		CLIENT
		 Draws a rectangle outline using the current color.
	**/
	#if CLIENT @:native("drawRectOutline") public static function drawRectOutline(x:Any, y:Any, w:Any, h:Any, thickness:Any):Void;#end
	/**
		CLIENT
		 Constructs a markup object for quick styled text drawing.
	**/
	#if CLIENT @:native("parseMarkup") public static function parseMarkup(str:Any, maxsize:Any):Any;#end
	/**
		CLIENT
		 Sets distance at which the fog will reach it's target density
	**/
	#if CLIENT @:native("setFogEnd") public static function setFogEnd(distance:Any):Void;#end
	/**
		CLIENT
		 Releases the texture. Required if you reach the maximum url textures.
	**/
	#if CLIENT @:native("destroyTexture") public static function destroyTexture(mat:Any):Void;#end
	/**
		CLIENT
		 Draws a line. Use 3D functions for float coordinates
	**/
	#if CLIENT @:native("drawLine") public static function drawLine(x1:Any, y1:Any, x2:Any, y2:Any):Void;#end
	/**
		CLIENT
		 Returns the render context's width and height. If a rendertarget is selected, will return 1024, 1024
	**/
	#if CLIENT @:native("getResolution") public static function getResolution():Any;#end
	/**
		CLIENT
		 Sets the overlay of the chip to a user's rendertarget
	**/
	#if CLIENT @:native("setChipOverlay") public static function setChipOverlay(name:Any):Void;#end
	/**
		CLIENT
		 Does a trace and returns the color of the textel the trace hits.
	**/
	#if CLIENT @:native("traceSurfaceColor") public static function traceSurfaceColor(vec1:Any, vec2:Any):Any;#end
	/**
		CLIENT
		 Draws region of RGB color channel tables to current render target.
	**/
	#if CLIENT @:native("drawPixelsSubrectRGB") public static function drawPixelsSubrectRGB(dstX:Any, dstY:Any, srcX:Any, srcY:Any, srcW:Any, srcH:Any, subrectW:Any, subrectH:Any, dataR:Any, dataG:Any, dataB:Any):Void;#end
	/**
		CLIENT
		 Draws a rotated, textured rectangle.
	**/
	#if CLIENT @:native("drawTexturedRectRotated") public static function drawTexturedRectRotated(x:Any, y:Any, w:Any, h:Any, rot:Any):Void;#end
	/**
		CLIENT
		 Makes the screen shake, client must be connected to a HUD.
	**/
	#if CLIENT @:native("screenShake") public static function screenShake(amplitude:Any, frequency:Any, duration:Any):Void;#end
	/**
		CLIENT
		 Clears the active render target
	**/
	#if CLIENT @:native("clear") public static function clear(clr:Any, depth:Any):Void;#end
	/**
		CLIENT
		 Draws a textured rectangle with UV coordinates
	**/
	#if CLIENT @:native("drawTexturedRectUV") public static function drawTexturedRectUV(x:Any, y:Any, w:Any, h:Any, startU:Any, startV:Any, endV:Any, endV:Any):Void;#end
	/**
		CLIENT
		 Sets the operation to be performed on the stencil buffer values if the compare function was not successful. More: http://wiki.facepunch.com/gmod/render.SetStencilFailOperation
	**/
	#if CLIENT @:native("setStencilFailOperation") public static function setStencilFailOperation(operation:Any):Void;#end
	/**
		CLIENT
		 Sets the reference value which will be used for all stencil operations. This is an unsigned integer.
	**/
	#if CLIENT @:native("setStencilReferenceValue") public static function setStencilReferenceValue(referenceValue:Any):Void;#end
	/**
		CLIENT
		 Draws a 3D Line
	**/
	#if CLIENT @:native("draw3DLine") public static function draw3DLine(startPos:Any, endPos:Any):Void;#end
	/**
		CLIENT
		 Applies a blur effect to the active rendertarget. This must be used with a rendertarget created beforehand.
	**/
	#if CLIENT @:native("drawBlurEffect") public static function drawBlurEffect(blurx:Any, blury:Any, passes:Any):Void;#end
	/**
		CLIENT
		 Removes the current active clipping plane from the clip plane stack.
	**/
	#if CLIENT @:native("popCustomClipPlane") public static function popCustomClipPlane():Void;#end
	/**
		CLIENT
		 Gets the light exposure on the specified position
	**/
	#if CLIENT @:native("getLightColor") public static function getLightColor(pos:Any):Any;#end
	/**
		CLIENT
		 Sets the fog mode. See: https://wiki.facepunch.com/gmod/Enums/MATERIAL_FOG
	**/
	#if CLIENT @:native("setFogMode") public static function setFogMode(mode:Any):Void;#end
	/**
		CLIENT
		 Draws a wireframe box in 3D space
	**/
	#if CLIENT @:native("draw3DWireframeBox") public static function draw3DWireframeBox(origin:Any, angle:Any, mins:Any, maxs:Any):Void;#end
	/**
		CLIENT
		 Draws a wireframe sphere
	**/
	#if CLIENT @:native("draw3DWireframeSphere") public static function draw3DWireframeSphere(pos:Any, radius:Any, longitudeSteps:Any, latitudeSteps:Any):Void;#end
	/**
		CLIENT
		 Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails. More: http://wiki.facepunch.com/gmod/render.SetStencilZFailOperation
	**/
	#if CLIENT @:native("setStencilZFailOperation") public static function setStencilZFailOperation(operation:Any):Void;#end
	/**
		CLIENT
		 Sets the current render material to the given material or the rendertarget, applying a color modification shader to the texture. Alias: render.setMaterialEffectColourModify
	**/
	#if CLIENT @:native("setMaterialEffectColorModify") public static function setMaterialEffectColorModify(mat:Any, cmStructure:Any):Void;#end
	/**
		CLIENT
		 Resets stencil operations to their default behavior
	**/
	#if CLIENT @:native("resetStencil") public static function resetStencil():Void;#end
	/**
		CLIENT
		 Draws a textured rectangle
	**/
	#if CLIENT @:native("drawTexturedRect") public static function drawTexturedRect(x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Using the custom screen model, sets the screen offset and size as long as its within bounds of -1024 to 1024 units
	**/
	#if CLIENT @:native("setScreenDimensions") public static function setScreenDimensions(screen:Any, x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Returns width and height of the game window
	**/
	#if CLIENT @:native("getGameResolution") public static function getGameResolution():Any;#end
	/**
		CLIENT
		 Changes color of the fog
	**/
	#if CLIENT @:native("setFogColor") public static function setFogColor(color:Any):Void;#end
	/**
		CLIENT
		 Calculates the lighting caused by dynamic lights for the specified surface
	**/
	#if CLIENT @:native("computeDynamicLighting") public static function computeDynamicLighting(pos:Any, normal:Any):Any;#end
	/**
		CLIENT
		 Sets the current render material to the given material or the rendertarget, applying a subtractive shader when drawn.
	**/
	#if CLIENT @:native("setMaterialEffectSub") public static function setMaterialEffectSub(mat:Any):Void;#end
	/**
		CLIENT
		 Sets the draw color
	**/
	#if CLIENT @:native("setColor") public static function setColor(clr:Any):Void;#end
	/**
		CLIENT
		 Sets the texture of a screen entity
	**/
	#if CLIENT @:native("setTextureFromScreen") public static function setTextureFromScreen(ent:Any):Void;#end
	/**
		CLIENT
		 Returns information about the screen, such as world offsets, dimentions, and rotation.
		 Note: this does a table copy so move it out of your draw hook
	**/
	#if CLIENT @:native("getScreenInfo") public static function getScreenInfo(e:Any):Any;#end
	/**
		CLIENT
		 Sets background color of screen
	**/
	#if CLIENT @:native("setBackgroundColor") public static function setBackgroundColor(col:Any, screen:Any):Void;#end
	/**
		CLIENT
		 Pushes a new clipping plane of the clip plane stack.
	**/
	#if CLIENT @:native("pushCustomClipPlane") public static function pushCustomClipPlane(normal:Any, distance:Any):Void;#end
	/**
		CLIENT
		 Dumps the current render target and allows the pixels to be accessed by render.readPixel.
	**/
	#if CLIENT @:native("capturePixels") public static function capturePixels():Void;#end
	/**
		CLIENT
		 Draws a textured rectangle
		 Faster, but uses integer coordinates and will get clipped by user's screen resolution
	**/
	#if CLIENT @:native("drawTexturedRectFast") public static function drawTexturedRectFast(x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Gets a 2D cursor position where ply is aiming at the current rendered screen or nil if they aren't aiming at it.
	**/
	#if CLIENT @:native("cursorPos") public static function cursorPos(ply:Any, screen:Any):Any;#end
	/**
		CLIENT
		 Draws textured beam.
	**/
	#if CLIENT @:native("draw3DBeam") public static function draw3DBeam(startPos:Any, endPos:Any, width:Any, textureStart:Any, textureEnd:Any):Void;#end
	/**
		CLIENT
		 Sets whether stencil tests are carried out for each rendered pixel. Only pixels passing the stencil test are written to the render target.
	**/
	#if CLIENT @:native("setStencilEnable") public static function setStencilEnable(enable:Any):Void;#end
	/**
		CLIENT
		 Draws a rectangle using the current color
		 Faster, but uses integer coordinates and will get clipped by user's screen resolution
	**/
	#if CLIENT @:native("drawRectFast") public static function drawRectFast(x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Draws 2 connected triangles.
	**/
	#if CLIENT @:native("draw3DQuad") public static function draw3DQuad(vert1:Any, vert2:Any, vert3:Any, vert4:Any):Void;#end
	/**
		CLIENT
		 Draws a polygon.
	**/
	#if CLIENT @:native("drawPoly") public static function drawPoly(poly:Any):Void;#end
	/**
		CLIENT
		 Sets the operation to be performed on the stencil buffer values if the compare function was successful. More: http://wiki.facepunch.com/gmod/render.SetStencilPassOperation
	**/
	#if CLIENT @:native("setStencilPassOperation") public static function setStencilPassOperation(operation:Any):Void;#end
	/**
		CLIENT
		 Changes the cull mode
	**/
	#if CLIENT @:native("setCullMode") public static function setCullMode(mode:Any):Void;#end
	/**
		CLIENT
		 Sets the current render material to the given material or the rendertarget, darkening the texture, and scaling up color values.
	**/
	#if CLIENT @:native("setMaterialEffectDownsample") public static function setMaterialEffectDownsample(mat:Any, darken:Any, multiply:Any):Void;#end
	/**
		CLIENT
		 Reads the color of the specified pixel.
	**/
	#if CLIENT @:native("readPixel") public static function readPixel(x:Any, y:Any):Any;#end
	/**
		CLIENT
		 Selects the render target to draw on.
		 Nil for the visible RT.
	**/
	#if CLIENT @:native("selectRenderTarget") public static function selectRenderTarget(name:Any):Void;#end
	/**
		CLIENT
		 Pushes a matrix onto the matrix stack.
	**/
	#if CLIENT @:native("pushMatrix") public static function pushMatrix(m:Any, world:Any):Void;#end
	/**
		CLIENT
		 Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.
	**/
	#if CLIENT @:native("setStencilTestMask") public static function setStencilTestMask(mask:Any):Void;#end
	/**
		CLIENT
		 Releases the rendertarget. Required if you reach the maximum rendertargets.
	**/
	#if CLIENT @:native("destroyRenderTarget") public static function destroyRenderTarget(name:Any):Void;#end
	/**
		CLIENT
		 Creates a new render target to draw onto.
		 The dimensions will always be 1024x1024
	**/
	#if CLIENT @:native("createRenderTarget") public static function createRenderTarget(name:Any):Void;#end
	/**
		CLIENT
		 Pushes a perspective matrix onto the view matrix stack.
	**/
	#if CLIENT @:native("pushViewMatrix") public static function pushViewMatrix(tbl:Any):Void;#end
	/**
		CLIENT
		 Sets the current render material
	**/
	#if CLIENT @:native("setMaterial") public static function setMaterial(mat:Any):Void;#end
	/**
		CLIENT
		 Check if the specified render target exists.
	**/
	#if CLIENT @:native("renderTargetExists") public static function renderTargetExists(name:Any):Void;#end
	/**
		CLIENT
		 Gets the size of the specified text. Don't forget to use setFont before calling this function
	**/
	#if CLIENT @:native("getTextSize") public static function getTextSize(text:Any):Any;#end
	/**
		CLIENT
		 Draws a rectangle using the current color
	**/
	#if CLIENT @:native("drawRect") public static function drawRect(x:Any, y:Any, w:Any, h:Any):Void;#end
	/**
		CLIENT
		 Disables a scissoring rect which limits the drawing area.
	**/
	#if CLIENT @:native("disableScissorRect") public static function disableScissorRect():Void;#end
	/**
		CLIENT
		 Sets the current render material to the given material or the rendertarget, applying an additive shader when drawn.
	**/
	#if CLIENT @:native("setMaterialEffectAdd") public static function setMaterialEffectAdd(mat:Any):Void;#end
	/**
		CLIENT
		 Draws a sphere
	**/
	#if CLIENT @:native("draw3DSphere") public static function draw3DSphere(pos:Any, radius:Any, longitudeSteps:Any, latitudeSteps:Any):Void;#end
	/**
		CLIENT
		 Sets distance at which the fog will start appearing
	**/
	#if CLIENT @:native("setFogStart") public static function setFogStart(distance:Any):Void;#end
	/**
		CLIENT
		 Resets the depth buffer
	**/
	#if CLIENT @:native("clearDepth") public static function clearDepth():Void;#end
	/**
		CLIENT
		 Draws RGB color channel tables to current render target.
	**/
	#if CLIENT @:native("drawPixelsRGB") public static function drawPixelsRGB(w:Any, h:Any, dataR:Any, dataG:Any, dataB:Any):Void;#end
	/**
		CLIENT
		 Pops a matrix from the matrix stack.
	**/
	#if CLIENT @:native("popMatrix") public static function popMatrix():Void;#end
	/**
		CLIENT
		 Sets the current render material to the given material or the rendertarget, applying a bloom shader to the texture.
	**/
	#if CLIENT @:native("setMaterialEffectBloom") public static function setMaterialEffectBloom(mat:Any, levelr:Any, levelg:Any, levelb:Any, colormul:Any):Void;#end
	/**
		CLIENT
		 Changes density of the fog
	**/
	#if CLIENT @:native("setFogDensity") public static function setFogDensity(density:Any):Void;#end
	/**
		CLIENT
		 Draws a sprite in 3d space.
	**/
	#if CLIENT @:native("draw3DSprite") public static function draw3DSprite(pos:Any, width:Any, height:Any):Void;#end
	/**
		CLIENT
		 Enables or disables Depth Buffer
	**/
	#if CLIENT @:native("enableDepth") public static function enableDepth(enable:Any):Void;#end
	/**
		CLIENT
		 Draws a rounded rectangle using the current color
	**/
	#if CLIENT @:native("drawRoundedBoxEx") public static function drawRoundedBoxEx(r:Any, x:Any, y:Any, w:Any, h:Any, tl:Any, tr:Any, bl:Any, br:Any):Void;#end
	/**
		CLIENT
		 Draws a textured rectangle with UV coordinates
		 Faster, but uses integer coordinates and will get clipped by user's screen resolution
	**/
	#if CLIENT @:native("drawTexturedRectUVFast") public static function drawTexturedRectUVFast(x:Any, y:Any, w:Any, h:Any, startU:Any, startV:Any, endU:Any, endV:Any, UVHack:Any):Void;#end
	/**
		CLIENT
		 Resets all values in the stencil buffer to zero.
	**/
	#if CLIENT @:native("clearStencil") public static function clearStencil():Void;#end
	/**
		CLIENT
		 Calculates the light color of a certain surface
	**/
	#if CLIENT @:native("computeLighting") public static function computeLighting(pos:Any, normal:Any):Any;#end
	/**
		CLIENT
		 Draws 2 connected triangles with custom UVs.
	**/
	#if CLIENT @:native("draw3DQuadUV") public static function draw3DQuadUV(vert1:Any, vert2:Any, vert3:Any, vert4:Any):Void;#end
	/**
		CLIENT
		 Sets the texture filtering function when viewing a close texture
	**/
	#if CLIENT @:native("setFilterMag") public static function setFilterMag(val:Any):Void;#end
	/**
		CLIENT
		 Creates a font. Does not require rendering hook
		 Base font can be one of (keep in mind that these may not exist on all clients if they are not shipped with starfall):
		 \- Akbar
		 \- Coolvetica
		 \- Roboto
		 \- Roboto Mono
		 \- FontAwesome
		 \- Courier New
		 \- Verdana
		 \- Arial
		 \- HalfLife2
		 \- hl2mp
		 \- csd
		 \- Tahoma
		 \- Trebuchet
		 \- Trebuchet MS
		 \- DejaVu Sans Mono
		 \- Lucida Console
		 \- Times New Roman
	**/
	#if CLIENT @:native("createFont") public static function createFont(font:Any, size:Any, weight:Any, antialias:Any, additive:Any, shadow:Any, outline:Any, blur:Any, extended:Any):Void;#end
	/**
		CLIENT
		 Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.
	**/
	#if CLIENT @:native("setStencilWriteMask") public static function setStencilWriteMask(mask:Any):Void;#end
}

