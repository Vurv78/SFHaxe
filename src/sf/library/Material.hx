// Generated by SFHaxe 0.3.1
package sf.library;
@:native("material") extern class Material {
	/**
		CLIENT
		 Returns the width of the member texture set for $basetexture of a material
	**/
	#if CLIENT @:native("getWidth") public static function getWidth(path:std.String):Float;#end
	/**
		CLIENT
		 Returns a material's engine name
	**/
	#if CLIENT @:native("getName") public static function getName(path:std.String):std.String;#end
	/**
		CLIENT
		 Returns a vector keyvalue of a material
	**/
	#if CLIENT @:native("getVector") public static function getVector(path:std.String, key:std.String):Null<sf.type.Vector>;#end
	/**
		CLIENT
		 Returns an int keyvalue of a material
	**/
	#if CLIENT @:native("getInt") public static function getInt(path:std.String, key:std.String):Null<Float>;#end
	/**
		CLIENT
		 Returns the shader name of a material
	**/
	#if CLIENT @:native("getShader") public static function getShader(path:std.String):std.String;#end
	/**
		CLIENT
		 Returns a table of keyvalues from a material
	**/
	#if CLIENT @:native("getKeyValues") public static function getKeyValues(path:std.String):lua.Table<Dynamic,Dynamic>;#end
	/**
		CLIENT
		 Creates a new blank material
		 UnlitGeneric
		 VertexLitGeneric
		 Refract_DX90
		 Water_DX90
		 Sky_DX9
		 gmodscreenspace
		 Modulate_DX9
	**/
	#if CLIENT @:native("create") public static function create(shader:std.String):sf.type.Material;#end
	/**
		CLIENT
		 Returns the height of the member texture set for $basetexture of a material
	**/
	#if CLIENT @:native("getHeight") public static function getHeight(path:std.String):Float;#end
	/**
		CLIENT
		 Gets a texture from a material
	**/
	#if CLIENT @:native("getTexture") public static function getTexture(path:std.String, texture:std.String):Null<std.String>;#end
	/**
		CLIENT
		 Creates a .jpg or .png material from file
		 Can't be modified
	**/
	#if CLIENT @:native("createFromImage") public static function createFromImage(path:std.String, params:std.String):sf.type.Material;#end
	/**
		CLIENT
		 Returns a color pixel value of the $basetexture of a .png or .jpg material.
	**/
	#if CLIENT @:native("getColor") public static function getColor(path:std.String, x:Float, y:Float):sf.type.Color;#end
	/**
		CLIENT
		 Loads a .vmt material or existing material. Throws an error if the material fails to load
		 Existing created materials can be loaded with ! prepended to the name
		 Can't be modified
	**/
	#if CLIENT @:native("load") public static function load(path:std.String):sf.type.Material;#end
	/**
		CLIENT
		 Returns a float keyvalue of a material
	**/
	#if CLIENT @:native("getFloat") public static function getFloat(path:std.String, key:std.String):Null<Float>;#end
	/**
		CLIENT
		 Returns a linear color-corrected vector keyvalue of a material
	**/
	#if CLIENT @:native("getVectorLinear") public static function getVectorLinear(path:std.String, key:std.String):Null<sf.type.Vector>;#end
	/**
		CLIENT
		 Returns a string keyvalue
	**/
	#if CLIENT @:native("getString") public static function getString(path:std.String, key:std.String):Null<std.String>;#end
	/**
		CLIENT
		 Returns a matrix keyvalue of a material
	**/
	#if CLIENT @:native("getMatrix") public static function getMatrix(path:std.String, key:std.String):Null<sf.type.VMatrix>;#end
}

