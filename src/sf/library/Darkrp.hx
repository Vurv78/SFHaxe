// Generated by SFHaxe 0.3.3
package sf.library;
@:native("darkrp") extern class Darkrp {
	/**
		SHARED
		Get a list of possible shipments.
	**/
	@:native("getCustomShipments") public static function getCustomShipments():Null<lua.Table<Dynamic,Dynamic>>;
	/**
		SERVER
		Request money from a player.
		This is subject to a burst limit, and a limit of one money request per sender per receiver at a time. Use "darkrp.canMakeMoneyRequest" to check if you can request money that tick for that player.
	**/
	#if SERVER @:native("requestMoney") public static function requestMoney(sender:sf.type.Player, amount:Float, ?message:Null<std.String>, ?callbackSuccess:Null<haxe.Constraints.Function>, ?callbackFailure:Null<haxe.Constraints.Function>, ?receiver:Null<sf.type.Player>):Void;#end
	/**
		SERVER
		Get the entity corresponding to a door index. Note: The door MUST have been created by the map!
	**/
	#if SERVER @:native("doorIndexToEnt") public static function doorIndexToEnt(doorIndex:Float):Null<sf.type.Entity>;#end
	/**
		CLIENT
		Open the F1 help menu. Roughly equivalent to pressing F1 (or running gm_showhelp), but won't close it if it's already open.
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("openF1Menu") public static function openF1Menu():Void;#end
	/**
		SHARED
		Get all categories for all F4 menu tabs, including all jobs and every entity available for purchase.
	**/
	@:native("getCategories") public static function getCategories():lua.Table<Dynamic,Dynamic>;
	/**
		SERVER
		Returns number of money requests left.
		By default, this replenishes at a rate of 1 every 2 seconds, up to a maximum of 1.
		In other words, you can make a maximum of 1 money request every 2 seconds. May vary from server to server.
	**/
	#if SERVER @:native("moneyRequestsLeft") public static function moneyRequestsLeft():Float;#end
	/**
		SHARED
		Get all food items.
	**/
	@:native("getFoodItems") public static function getFoodItems():Null<lua.Table<Dynamic,Dynamic>>;
	/**
		CLIENT
		Close the F1 help menu.
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("closeF1Menu") public static function closeF1Menu():Void;#end
	/**
		CLIENT
		Open the DarkRP pocket menu. This refers to DarkRP's built-in "pocket", and probably not your server's custom inventory system.
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("openPocketMenu") public static function openPocketMenu():Void;#end
	/**
		SERVER
		Returns whether you can give someone money this tick.
	**/
	#if SERVER @:native("canGiveMoney") public static function canGiveMoney():Bool;#end
	/**
		SHARED
		Get the available vehicles that DarkRP supports.
	**/
	@:native("getAvailableVehicles") public static function getAvailableVehicles():lua.Table<Dynamic,Dynamic>;
	/**
		SHARED
		Get the table of all current laws.
	**/
	@:native("getLaws") public static function getLaws():lua.Table<Dynamic,Dynamic>;
	/**
		CLIENT
		Open the F4 menu (the one where you can choose your job, buy shipments, ammo, money printers, etc). Roughly equivalent to pressing F4 (or running gm_showspare2), but won't close it if it's already open.
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("openF4Menu") public static function openF4Menu():Void;#end
	/**
		SERVER
		Returns number of times you can give someone money.
		By default, this replenishes at a rate of 1 every 2 seconds, up to a maximum of 2.
		In other words, you can give out money two times at once, then you have to wait two seconds. May vary from server to server.
	**/
	#if SERVER @:native("moneyGivingsLeft") public static function moneyGivingsLeft():Float;#end
	/**
		SERVER
		Make one player give money to the other player.
		This is subject to a burst limit. Use "darkrp.canGiveMoney" to check if you can give out money that tick.
		Only works if the sender is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if SERVER @:native("payPlayer") public static function payPlayer(sender:sf.type.Player, receiver:sf.type.Player, amount:Float):Void;#end
	/**
		CLIENT
		Toggle the state of the F4 menu (open or closed). Equivalent to pressing F4 (or running gm_showspare2).
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("toggleF4Menu") public static function toggleF4Menu():Void;#end
	/**
		SHARED
		Get whether a DarkRPVar is blacklisted from being read by Starfall.
	**/
	@:native("isDarkRPVarBlacklisted") public static function isDarkRPVarBlacklisted(_var:std.String):Bool;
	/**
		SHARED
		Format a number as a money value. Includes currency symbol.
	**/
	@:native("formatMoney") public static function formatMoney(amount:Float):std.String;
	/**
		CLIENT
		Close the F4 menu (the one where you can choose your job, buy shipments, ammo, money printers, etc).
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("closeF4Menu") public static function closeF4Menu():Void;#end
	/**
		SERVER
		Returns whether you can make another money request this tick.
		If a player is provided as a parameter, will also check if you can request money from that particular player this tick.
	**/
	#if SERVER @:native("canMakeMoneyRequest") public static function canMakeMoneyRequest(?sender:Null<sf.type.Player>):Bool;#end
	/**
		SERVER
		Get the number of jail positions in the current map.
	**/
	#if SERVER @:native("jailPosCount") public static function jailPosCount():Float;#end
	/**
		CLIENT
		Buy the door the local player is looking at, or open the menu if it's already bought. Equivalent to pressing F2 (or running gm_showteam).
		Only works if the local player is the owner of the chip, or if the chip is running in superuser mode.
	**/
	#if CLIENT @:native("openKeysMenu") public static function openKeysMenu():Void;#end
}

