// Generated by SFHaxe 0.3.0
package sf.library;
@:native("coroutine") extern class Coroutine {
	/**
		SHARED
		 Creates a new coroutine.
	**/
	@:native("wrap") public static function wrap(func:haxe.Constraints.Function):haxe.Constraints.Function;
	/**
		SHARED
		 Resumes a suspended coroutine. Note that, in contrast to Lua's native coroutine.resume function, it will not run in protected mode and can throw an error.
	**/
	@:native("resume") public static function resume(coroutine:lua.Thread, args:Dynamic):Dynamic;
	/**
		SHARED
		 Returns the coroutine that is currently running.
	**/
	@:native("running") public static function running():lua.Thread;
	/**
		SHARED
		 Returns the status of the coroutine.
	**/
	@:native("status") public static function status(coroutine:lua.Thread):std.String;
	/**
		SHARED
		 Suspends the coroutine for a number of seconds. Note that the coroutine will not resume automatically, but any attempts to resume the coroutine while it is waiting will not resume the coroutine and act as if the coroutine suspended itself immediately.
	**/
	@:native("wait") public static function wait(time:Float):Void;
	/**
		SHARED
		 Creates a new coroutine.
	**/
	@:native("create") public static function create(func:haxe.Constraints.Function):lua.Thread;
	/**
		SHARED
		 Suspends the currently running coroutine. May not be called outside a coroutine.
	**/
	@:native("yield") public static function yield(Optional:Dynamic):Dynamic;
}

